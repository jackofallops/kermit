package search

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// BlobIndexerDataToExtract enumerates the values for blob indexer data to extract.
type BlobIndexerDataToExtract string

const (
	// BlobIndexerDataToExtractAllMetadata Extracts metadata provided by the Azure blob storage subsystem and
	// the content-type specific metadata (for example, metadata unique to just .png files are indexed).
	BlobIndexerDataToExtractAllMetadata BlobIndexerDataToExtract = "allMetadata"
	// BlobIndexerDataToExtractContentAndMetadata Extracts all metadata and textual content from each blob.
	BlobIndexerDataToExtractContentAndMetadata BlobIndexerDataToExtract = "contentAndMetadata"
	// BlobIndexerDataToExtractStorageMetadata Indexes just the standard blob properties and user-specified
	// metadata.
	BlobIndexerDataToExtractStorageMetadata BlobIndexerDataToExtract = "storageMetadata"
)

// PossibleBlobIndexerDataToExtractValues returns an array of possible values for the BlobIndexerDataToExtract const type.
func PossibleBlobIndexerDataToExtractValues() []BlobIndexerDataToExtract {
	return []BlobIndexerDataToExtract{BlobIndexerDataToExtractAllMetadata, BlobIndexerDataToExtractContentAndMetadata, BlobIndexerDataToExtractStorageMetadata}
}

// BlobIndexerImageAction enumerates the values for blob indexer image action.
type BlobIndexerImageAction string

const (
	// BlobIndexerImageActionGenerateNormalizedImagePerPage Extracts text from images (for example, the word
	// "STOP" from a traffic stop sign), and embeds it into the content field, but treats PDF files differently
	// in that each page will be rendered as an image and normalized accordingly, instead of extracting
	// embedded images.  Non-PDF file types will be treated the same as if "generateNormalizedImages" was set.
	BlobIndexerImageActionGenerateNormalizedImagePerPage BlobIndexerImageAction = "generateNormalizedImagePerPage"
	// BlobIndexerImageActionGenerateNormalizedImages Extracts text from images (for example, the word "STOP"
	// from a traffic stop sign), and embeds it into the content field.  This action requires that
	// "dataToExtract" is set to "contentAndMetadata".  A normalized image refers to additional processing
	// resulting in uniform image output, sized and rotated to promote consistent rendering when you include
	// images in visual search results. This information is generated for each image when you use this option.
	BlobIndexerImageActionGenerateNormalizedImages BlobIndexerImageAction = "generateNormalizedImages"
	// BlobIndexerImageActionNone Ignores embedded images or image files in the data set.  This is the default.
	BlobIndexerImageActionNone BlobIndexerImageAction = "none"
)

// PossibleBlobIndexerImageActionValues returns an array of possible values for the BlobIndexerImageAction const type.
func PossibleBlobIndexerImageActionValues() []BlobIndexerImageAction {
	return []BlobIndexerImageAction{BlobIndexerImageActionGenerateNormalizedImagePerPage, BlobIndexerImageActionGenerateNormalizedImages, BlobIndexerImageActionNone}
}

// BlobIndexerPDFTextRotationAlgorithm enumerates the values for blob indexer pdf text rotation algorithm.
type BlobIndexerPDFTextRotationAlgorithm string

const (
	// BlobIndexerPDFTextRotationAlgorithmDetectAngles May produce better and more readable text extraction
	// from PDF files that have rotated text within them.  Note that there may be a small performance speed
	// impact when this parameter is used.  This parameter only applies to PDF files, and only to PDFs with
	// embedded text.  If the rotated text appears within an embedded image in the PDF, this parameter does not
	// apply.
	BlobIndexerPDFTextRotationAlgorithmDetectAngles BlobIndexerPDFTextRotationAlgorithm = "detectAngles"
	// BlobIndexerPDFTextRotationAlgorithmNone Leverages normal text extraction.  This is the default.
	BlobIndexerPDFTextRotationAlgorithmNone BlobIndexerPDFTextRotationAlgorithm = "none"
)

// PossibleBlobIndexerPDFTextRotationAlgorithmValues returns an array of possible values for the BlobIndexerPDFTextRotationAlgorithm const type.
func PossibleBlobIndexerPDFTextRotationAlgorithmValues() []BlobIndexerPDFTextRotationAlgorithm {
	return []BlobIndexerPDFTextRotationAlgorithm{BlobIndexerPDFTextRotationAlgorithmDetectAngles, BlobIndexerPDFTextRotationAlgorithmNone}
}

// BlobIndexerParsingMode enumerates the values for blob indexer parsing mode.
type BlobIndexerParsingMode string

const (
	// BlobIndexerParsingModeDefault Set to default for normal file processing.
	BlobIndexerParsingModeDefault BlobIndexerParsingMode = "default"
	// BlobIndexerParsingModeDelimitedText Set to delimitedText when blobs are plain CSV files.
	BlobIndexerParsingModeDelimitedText BlobIndexerParsingMode = "delimitedText"
	// BlobIndexerParsingModeJSON Set to json to extract structured content from JSON files.
	BlobIndexerParsingModeJSON BlobIndexerParsingMode = "json"
	// BlobIndexerParsingModeJSONArray Set to jsonArray to extract individual elements of a JSON array as
	// separate documents.
	BlobIndexerParsingModeJSONArray BlobIndexerParsingMode = "jsonArray"
	// BlobIndexerParsingModeJSONLines Set to jsonLines to extract individual JSON entities, separated by a new
	// line, as separate documents.
	BlobIndexerParsingModeJSONLines BlobIndexerParsingMode = "jsonLines"
	// BlobIndexerParsingModeText Set to text to improve indexing performance on plain text files in blob
	// storage.
	BlobIndexerParsingModeText BlobIndexerParsingMode = "text"
)

// PossibleBlobIndexerParsingModeValues returns an array of possible values for the BlobIndexerParsingMode const type.
func PossibleBlobIndexerParsingModeValues() []BlobIndexerParsingMode {
	return []BlobIndexerParsingMode{BlobIndexerParsingModeDefault, BlobIndexerParsingModeDelimitedText, BlobIndexerParsingModeJSON, BlobIndexerParsingModeJSONArray, BlobIndexerParsingModeJSONLines, BlobIndexerParsingModeText}
}

// CharFilterName enumerates the values for char filter name.
type CharFilterName string

const (
	// CharFilterNameHTMLStrip A character filter that attempts to strip out HTML constructs. See
	// https://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.html
	CharFilterNameHTMLStrip CharFilterName = "html_strip"
)

// PossibleCharFilterNameValues returns an array of possible values for the CharFilterName const type.
func PossibleCharFilterNameValues() []CharFilterName {
	return []CharFilterName{CharFilterNameHTMLStrip}
}

// CjkBigramTokenFilterScripts enumerates the values for cjk bigram token filter scripts.
type CjkBigramTokenFilterScripts string

const (
	// CjkBigramTokenFilterScriptsHan Ignore Han script when forming bigrams of CJK terms.
	CjkBigramTokenFilterScriptsHan CjkBigramTokenFilterScripts = "han"
	// CjkBigramTokenFilterScriptsHangul Ignore Hangul script when forming bigrams of CJK terms.
	CjkBigramTokenFilterScriptsHangul CjkBigramTokenFilterScripts = "hangul"
	// CjkBigramTokenFilterScriptsHiragana Ignore Hiragana script when forming bigrams of CJK terms.
	CjkBigramTokenFilterScriptsHiragana CjkBigramTokenFilterScripts = "hiragana"
	// CjkBigramTokenFilterScriptsKatakana Ignore Katakana script when forming bigrams of CJK terms.
	CjkBigramTokenFilterScriptsKatakana CjkBigramTokenFilterScripts = "katakana"
)

// PossibleCjkBigramTokenFilterScriptsValues returns an array of possible values for the CjkBigramTokenFilterScripts const type.
func PossibleCjkBigramTokenFilterScriptsValues() []CjkBigramTokenFilterScripts {
	return []CjkBigramTokenFilterScripts{CjkBigramTokenFilterScriptsHan, CjkBigramTokenFilterScriptsHangul, CjkBigramTokenFilterScriptsHiragana, CjkBigramTokenFilterScriptsKatakana}
}

// CustomEntityLookupSkillLanguage enumerates the values for custom entity lookup skill language.
type CustomEntityLookupSkillLanguage string

const (
	// CustomEntityLookupSkillLanguageDa Danish
	CustomEntityLookupSkillLanguageDa CustomEntityLookupSkillLanguage = "da"
	// CustomEntityLookupSkillLanguageDe German
	CustomEntityLookupSkillLanguageDe CustomEntityLookupSkillLanguage = "de"
	// CustomEntityLookupSkillLanguageEn English
	CustomEntityLookupSkillLanguageEn CustomEntityLookupSkillLanguage = "en"
	// CustomEntityLookupSkillLanguageEs Spanish
	CustomEntityLookupSkillLanguageEs CustomEntityLookupSkillLanguage = "es"
	// CustomEntityLookupSkillLanguageFi Finnish
	CustomEntityLookupSkillLanguageFi CustomEntityLookupSkillLanguage = "fi"
	// CustomEntityLookupSkillLanguageFr French
	CustomEntityLookupSkillLanguageFr CustomEntityLookupSkillLanguage = "fr"
	// CustomEntityLookupSkillLanguageIt Italian
	CustomEntityLookupSkillLanguageIt CustomEntityLookupSkillLanguage = "it"
	// CustomEntityLookupSkillLanguageKo Korean
	CustomEntityLookupSkillLanguageKo CustomEntityLookupSkillLanguage = "ko"
	// CustomEntityLookupSkillLanguagePt Portuguese
	CustomEntityLookupSkillLanguagePt CustomEntityLookupSkillLanguage = "pt"
)

// PossibleCustomEntityLookupSkillLanguageValues returns an array of possible values for the CustomEntityLookupSkillLanguage const type.
func PossibleCustomEntityLookupSkillLanguageValues() []CustomEntityLookupSkillLanguage {
	return []CustomEntityLookupSkillLanguage{CustomEntityLookupSkillLanguageDa, CustomEntityLookupSkillLanguageDe, CustomEntityLookupSkillLanguageEn, CustomEntityLookupSkillLanguageEs, CustomEntityLookupSkillLanguageFi, CustomEntityLookupSkillLanguageFr, CustomEntityLookupSkillLanguageIt, CustomEntityLookupSkillLanguageKo, CustomEntityLookupSkillLanguagePt}
}

// EdgeNGramTokenFilterSide enumerates the values for edge n gram token filter side.
type EdgeNGramTokenFilterSide string

const (
	// EdgeNGramTokenFilterSideBack Specifies that the n-gram should be generated from the back of the input.
	EdgeNGramTokenFilterSideBack EdgeNGramTokenFilterSide = "back"
	// EdgeNGramTokenFilterSideFront Specifies that the n-gram should be generated from the front of the input.
	EdgeNGramTokenFilterSideFront EdgeNGramTokenFilterSide = "front"
)

// PossibleEdgeNGramTokenFilterSideValues returns an array of possible values for the EdgeNGramTokenFilterSide const type.
func PossibleEdgeNGramTokenFilterSideValues() []EdgeNGramTokenFilterSide {
	return []EdgeNGramTokenFilterSide{EdgeNGramTokenFilterSideBack, EdgeNGramTokenFilterSideFront}
}

// EntityCategory enumerates the values for entity category.
type EntityCategory string

const (
	// EntityCategoryDatetime Entities describing a date and time.
	EntityCategoryDatetime EntityCategory = "datetime"
	// EntityCategoryEmail Entities describing an email address.
	EntityCategoryEmail EntityCategory = "email"
	// EntityCategoryLocation Entities describing a physical location.
	EntityCategoryLocation EntityCategory = "location"
	// EntityCategoryOrganization Entities describing an organization.
	EntityCategoryOrganization EntityCategory = "organization"
	// EntityCategoryPerson Entities describing a person.
	EntityCategoryPerson EntityCategory = "person"
	// EntityCategoryQuantity Entities describing a quantity.
	EntityCategoryQuantity EntityCategory = "quantity"
	// EntityCategoryURL Entities describing a URL.
	EntityCategoryURL EntityCategory = "url"
)

// PossibleEntityCategoryValues returns an array of possible values for the EntityCategory const type.
func PossibleEntityCategoryValues() []EntityCategory {
	return []EntityCategory{EntityCategoryDatetime, EntityCategoryEmail, EntityCategoryLocation, EntityCategoryOrganization, EntityCategoryPerson, EntityCategoryQuantity, EntityCategoryURL}
}

// EntityRecognitionSkillLanguage enumerates the values for entity recognition skill language.
type EntityRecognitionSkillLanguage string

const (
	// EntityRecognitionSkillLanguageAr Arabic
	EntityRecognitionSkillLanguageAr EntityRecognitionSkillLanguage = "ar"
	// EntityRecognitionSkillLanguageCs Czech
	EntityRecognitionSkillLanguageCs EntityRecognitionSkillLanguage = "cs"
	// EntityRecognitionSkillLanguageDa Danish
	EntityRecognitionSkillLanguageDa EntityRecognitionSkillLanguage = "da"
	// EntityRecognitionSkillLanguageDe German
	EntityRecognitionSkillLanguageDe EntityRecognitionSkillLanguage = "de"
	// EntityRecognitionSkillLanguageEl Greek
	EntityRecognitionSkillLanguageEl EntityRecognitionSkillLanguage = "el"
	// EntityRecognitionSkillLanguageEn English
	EntityRecognitionSkillLanguageEn EntityRecognitionSkillLanguage = "en"
	// EntityRecognitionSkillLanguageEs Spanish
	EntityRecognitionSkillLanguageEs EntityRecognitionSkillLanguage = "es"
	// EntityRecognitionSkillLanguageFi Finnish
	EntityRecognitionSkillLanguageFi EntityRecognitionSkillLanguage = "fi"
	// EntityRecognitionSkillLanguageFr French
	EntityRecognitionSkillLanguageFr EntityRecognitionSkillLanguage = "fr"
	// EntityRecognitionSkillLanguageHu Hungarian
	EntityRecognitionSkillLanguageHu EntityRecognitionSkillLanguage = "hu"
	// EntityRecognitionSkillLanguageIt Italian
	EntityRecognitionSkillLanguageIt EntityRecognitionSkillLanguage = "it"
	// EntityRecognitionSkillLanguageJa Japanese
	EntityRecognitionSkillLanguageJa EntityRecognitionSkillLanguage = "ja"
	// EntityRecognitionSkillLanguageKo Korean
	EntityRecognitionSkillLanguageKo EntityRecognitionSkillLanguage = "ko"
	// EntityRecognitionSkillLanguageNl Dutch
	EntityRecognitionSkillLanguageNl EntityRecognitionSkillLanguage = "nl"
	// EntityRecognitionSkillLanguageNo Norwegian (Bokmaal)
	EntityRecognitionSkillLanguageNo EntityRecognitionSkillLanguage = "no"
	// EntityRecognitionSkillLanguagePl Polish
	EntityRecognitionSkillLanguagePl EntityRecognitionSkillLanguage = "pl"
	// EntityRecognitionSkillLanguagePtBR Portuguese (Brazil)
	EntityRecognitionSkillLanguagePtBR EntityRecognitionSkillLanguage = "pt-BR"
	// EntityRecognitionSkillLanguagePtPT Portuguese (Portugal)
	EntityRecognitionSkillLanguagePtPT EntityRecognitionSkillLanguage = "pt-PT"
	// EntityRecognitionSkillLanguageRu Russian
	EntityRecognitionSkillLanguageRu EntityRecognitionSkillLanguage = "ru"
	// EntityRecognitionSkillLanguageSv Swedish
	EntityRecognitionSkillLanguageSv EntityRecognitionSkillLanguage = "sv"
	// EntityRecognitionSkillLanguageTr Turkish
	EntityRecognitionSkillLanguageTr EntityRecognitionSkillLanguage = "tr"
	// EntityRecognitionSkillLanguageZhHans Chinese-Simplified
	EntityRecognitionSkillLanguageZhHans EntityRecognitionSkillLanguage = "zh-Hans"
	// EntityRecognitionSkillLanguageZhHant Chinese-Traditional
	EntityRecognitionSkillLanguageZhHant EntityRecognitionSkillLanguage = "zh-Hant"
)

// PossibleEntityRecognitionSkillLanguageValues returns an array of possible values for the EntityRecognitionSkillLanguage const type.
func PossibleEntityRecognitionSkillLanguageValues() []EntityRecognitionSkillLanguage {
	return []EntityRecognitionSkillLanguage{EntityRecognitionSkillLanguageAr, EntityRecognitionSkillLanguageCs, EntityRecognitionSkillLanguageDa, EntityRecognitionSkillLanguageDe, EntityRecognitionSkillLanguageEl, EntityRecognitionSkillLanguageEn, EntityRecognitionSkillLanguageEs, EntityRecognitionSkillLanguageFi, EntityRecognitionSkillLanguageFr, EntityRecognitionSkillLanguageHu, EntityRecognitionSkillLanguageIt, EntityRecognitionSkillLanguageJa, EntityRecognitionSkillLanguageKo, EntityRecognitionSkillLanguageNl, EntityRecognitionSkillLanguageNo, EntityRecognitionSkillLanguagePl, EntityRecognitionSkillLanguagePtBR, EntityRecognitionSkillLanguagePtPT, EntityRecognitionSkillLanguageRu, EntityRecognitionSkillLanguageSv, EntityRecognitionSkillLanguageTr, EntityRecognitionSkillLanguageZhHans, EntityRecognitionSkillLanguageZhHant}
}

// FieldDataType enumerates the values for field data type.
type FieldDataType string

const (
	// FieldDataTypeBoolean Indicates that a field contains a Boolean value (true or false).
	FieldDataTypeBoolean FieldDataType = "Edm.Boolean"
	// FieldDataTypeComplex Indicates that a field contains one or more complex objects that in turn have
	// sub-fields of other types.
	FieldDataTypeComplex FieldDataType = "Edm.ComplexType"
	// FieldDataTypeDateTimeOffset Indicates that a field contains a date/time value, including timezone
	// information.
	FieldDataTypeDateTimeOffset FieldDataType = "Edm.DateTimeOffset"
	// FieldDataTypeDouble Indicates that a field contains an IEEE double-precision floating point number.
	FieldDataTypeDouble FieldDataType = "Edm.Double"
	// FieldDataTypeGeographyPoint Indicates that a field contains a geo-location in terms of longitude and
	// latitude.
	FieldDataTypeGeographyPoint FieldDataType = "Edm.GeographyPoint"
	// FieldDataTypeHalf Indicates that a field contains a half-precision floating point number. This is only
	// valid when used with Collection(Edm.Half).
	FieldDataTypeHalf FieldDataType = "Edm.Half"
	// FieldDataTypeInt16 Indicates that a field contains a 16-bit signed integer. This is only valid when used
	// with Collection(Edm.Int16).
	FieldDataTypeInt16 FieldDataType = "Edm.Int16"
	// FieldDataTypeInt32 Indicates that a field contains a 32-bit signed integer.
	FieldDataTypeInt32 FieldDataType = "Edm.Int32"
	// FieldDataTypeInt64 Indicates that a field contains a 64-bit signed integer.
	FieldDataTypeInt64 FieldDataType = "Edm.Int64"
	// FieldDataTypeSByte Indicates that a field contains a 8-bit signed integer. This is only valid when used
	// with Collection(Edm.SByte).
	FieldDataTypeSByte FieldDataType = "Edm.SByte"
	// FieldDataTypeSingle Indicates that a field contains a single-precision floating point number. This is
	// only valid when used with Collection(Edm.Single).
	FieldDataTypeSingle FieldDataType = "Edm.Single"
	// FieldDataTypeString Indicates that a field contains a string.
	FieldDataTypeString FieldDataType = "Edm.String"
)

// PossibleFieldDataTypeValues returns an array of possible values for the FieldDataType const type.
func PossibleFieldDataTypeValues() []FieldDataType {
	return []FieldDataType{FieldDataTypeBoolean, FieldDataTypeComplex, FieldDataTypeDateTimeOffset, FieldDataTypeDouble, FieldDataTypeGeographyPoint, FieldDataTypeHalf, FieldDataTypeInt16, FieldDataTypeInt32, FieldDataTypeInt64, FieldDataTypeSByte, FieldDataTypeSingle, FieldDataTypeString}
}

// ImageAnalysisSkillLanguage enumerates the values for image analysis skill language.
type ImageAnalysisSkillLanguage string

const (
	// ImageAnalysisSkillLanguageAr Arabic
	ImageAnalysisSkillLanguageAr ImageAnalysisSkillLanguage = "ar"
	// ImageAnalysisSkillLanguageAz Azerbaijani
	ImageAnalysisSkillLanguageAz ImageAnalysisSkillLanguage = "az"
	// ImageAnalysisSkillLanguageBg Bulgarian
	ImageAnalysisSkillLanguageBg ImageAnalysisSkillLanguage = "bg"
	// ImageAnalysisSkillLanguageBs Bosnian Latin
	ImageAnalysisSkillLanguageBs ImageAnalysisSkillLanguage = "bs"
	// ImageAnalysisSkillLanguageCa Catalan
	ImageAnalysisSkillLanguageCa ImageAnalysisSkillLanguage = "ca"
	// ImageAnalysisSkillLanguageCs Czech
	ImageAnalysisSkillLanguageCs ImageAnalysisSkillLanguage = "cs"
	// ImageAnalysisSkillLanguageCy Welsh
	ImageAnalysisSkillLanguageCy ImageAnalysisSkillLanguage = "cy"
	// ImageAnalysisSkillLanguageDa Danish
	ImageAnalysisSkillLanguageDa ImageAnalysisSkillLanguage = "da"
	// ImageAnalysisSkillLanguageDe German
	ImageAnalysisSkillLanguageDe ImageAnalysisSkillLanguage = "de"
	// ImageAnalysisSkillLanguageEl Greek
	ImageAnalysisSkillLanguageEl ImageAnalysisSkillLanguage = "el"
	// ImageAnalysisSkillLanguageEn English
	ImageAnalysisSkillLanguageEn ImageAnalysisSkillLanguage = "en"
	// ImageAnalysisSkillLanguageEs Spanish
	ImageAnalysisSkillLanguageEs ImageAnalysisSkillLanguage = "es"
	// ImageAnalysisSkillLanguageEt Estonian
	ImageAnalysisSkillLanguageEt ImageAnalysisSkillLanguage = "et"
	// ImageAnalysisSkillLanguageEu Basque
	ImageAnalysisSkillLanguageEu ImageAnalysisSkillLanguage = "eu"
	// ImageAnalysisSkillLanguageFi Finnish
	ImageAnalysisSkillLanguageFi ImageAnalysisSkillLanguage = "fi"
	// ImageAnalysisSkillLanguageFr French
	ImageAnalysisSkillLanguageFr ImageAnalysisSkillLanguage = "fr"
	// ImageAnalysisSkillLanguageGa Irish
	ImageAnalysisSkillLanguageGa ImageAnalysisSkillLanguage = "ga"
	// ImageAnalysisSkillLanguageGl Galician
	ImageAnalysisSkillLanguageGl ImageAnalysisSkillLanguage = "gl"
	// ImageAnalysisSkillLanguageHe Hebrew
	ImageAnalysisSkillLanguageHe ImageAnalysisSkillLanguage = "he"
	// ImageAnalysisSkillLanguageHi Hindi
	ImageAnalysisSkillLanguageHi ImageAnalysisSkillLanguage = "hi"
	// ImageAnalysisSkillLanguageHr Croatian
	ImageAnalysisSkillLanguageHr ImageAnalysisSkillLanguage = "hr"
	// ImageAnalysisSkillLanguageHu Hungarian
	ImageAnalysisSkillLanguageHu ImageAnalysisSkillLanguage = "hu"
	// ImageAnalysisSkillLanguageID Indonesian
	ImageAnalysisSkillLanguageID ImageAnalysisSkillLanguage = "id"
	// ImageAnalysisSkillLanguageIt Italian
	ImageAnalysisSkillLanguageIt ImageAnalysisSkillLanguage = "it"
	// ImageAnalysisSkillLanguageJa Japanese
	ImageAnalysisSkillLanguageJa ImageAnalysisSkillLanguage = "ja"
	// ImageAnalysisSkillLanguageKk Kazakh
	ImageAnalysisSkillLanguageKk ImageAnalysisSkillLanguage = "kk"
	// ImageAnalysisSkillLanguageKo Korean
	ImageAnalysisSkillLanguageKo ImageAnalysisSkillLanguage = "ko"
	// ImageAnalysisSkillLanguageLt Lithuanian
	ImageAnalysisSkillLanguageLt ImageAnalysisSkillLanguage = "lt"
	// ImageAnalysisSkillLanguageLv Latvian
	ImageAnalysisSkillLanguageLv ImageAnalysisSkillLanguage = "lv"
	// ImageAnalysisSkillLanguageMk Macedonian
	ImageAnalysisSkillLanguageMk ImageAnalysisSkillLanguage = "mk"
	// ImageAnalysisSkillLanguageMs Malay Malaysia
	ImageAnalysisSkillLanguageMs ImageAnalysisSkillLanguage = "ms"
	// ImageAnalysisSkillLanguageNb Norwegian (Bokmal)
	ImageAnalysisSkillLanguageNb ImageAnalysisSkillLanguage = "nb"
	// ImageAnalysisSkillLanguageNl Dutch
	ImageAnalysisSkillLanguageNl ImageAnalysisSkillLanguage = "nl"
	// ImageAnalysisSkillLanguagePl Polish
	ImageAnalysisSkillLanguagePl ImageAnalysisSkillLanguage = "pl"
	// ImageAnalysisSkillLanguagePrs Dari
	ImageAnalysisSkillLanguagePrs ImageAnalysisSkillLanguage = "prs"
	// ImageAnalysisSkillLanguagePt Portuguese-Portugal
	ImageAnalysisSkillLanguagePt ImageAnalysisSkillLanguage = "pt"
	// ImageAnalysisSkillLanguagePtBR Portuguese-Brazil
	ImageAnalysisSkillLanguagePtBR ImageAnalysisSkillLanguage = "pt-BR"
	// ImageAnalysisSkillLanguagePtPT Portuguese-Portugal
	ImageAnalysisSkillLanguagePtPT ImageAnalysisSkillLanguage = "pt-PT"
	// ImageAnalysisSkillLanguageRo Romanian
	ImageAnalysisSkillLanguageRo ImageAnalysisSkillLanguage = "ro"
	// ImageAnalysisSkillLanguageRu Russian
	ImageAnalysisSkillLanguageRu ImageAnalysisSkillLanguage = "ru"
	// ImageAnalysisSkillLanguageSk Slovak
	ImageAnalysisSkillLanguageSk ImageAnalysisSkillLanguage = "sk"
	// ImageAnalysisSkillLanguageSl Slovenian
	ImageAnalysisSkillLanguageSl ImageAnalysisSkillLanguage = "sl"
	// ImageAnalysisSkillLanguageSrCyrl Serbian - Cyrillic RS
	ImageAnalysisSkillLanguageSrCyrl ImageAnalysisSkillLanguage = "sr-Cyrl"
	// ImageAnalysisSkillLanguageSrLatn Serbian - Latin RS
	ImageAnalysisSkillLanguageSrLatn ImageAnalysisSkillLanguage = "sr-Latn"
	// ImageAnalysisSkillLanguageSv Swedish
	ImageAnalysisSkillLanguageSv ImageAnalysisSkillLanguage = "sv"
	// ImageAnalysisSkillLanguageTh Thai
	ImageAnalysisSkillLanguageTh ImageAnalysisSkillLanguage = "th"
	// ImageAnalysisSkillLanguageTr Turkish
	ImageAnalysisSkillLanguageTr ImageAnalysisSkillLanguage = "tr"
	// ImageAnalysisSkillLanguageUk Ukrainian
	ImageAnalysisSkillLanguageUk ImageAnalysisSkillLanguage = "uk"
	// ImageAnalysisSkillLanguageVi Vietnamese
	ImageAnalysisSkillLanguageVi ImageAnalysisSkillLanguage = "vi"
	// ImageAnalysisSkillLanguageZh Chinese Simplified
	ImageAnalysisSkillLanguageZh ImageAnalysisSkillLanguage = "zh"
	// ImageAnalysisSkillLanguageZhHans Chinese Simplified
	ImageAnalysisSkillLanguageZhHans ImageAnalysisSkillLanguage = "zh-Hans"
	// ImageAnalysisSkillLanguageZhHant Chinese Traditional
	ImageAnalysisSkillLanguageZhHant ImageAnalysisSkillLanguage = "zh-Hant"
)

// PossibleImageAnalysisSkillLanguageValues returns an array of possible values for the ImageAnalysisSkillLanguage const type.
func PossibleImageAnalysisSkillLanguageValues() []ImageAnalysisSkillLanguage {
	return []ImageAnalysisSkillLanguage{ImageAnalysisSkillLanguageAr, ImageAnalysisSkillLanguageAz, ImageAnalysisSkillLanguageBg, ImageAnalysisSkillLanguageBs, ImageAnalysisSkillLanguageCa, ImageAnalysisSkillLanguageCs, ImageAnalysisSkillLanguageCy, ImageAnalysisSkillLanguageDa, ImageAnalysisSkillLanguageDe, ImageAnalysisSkillLanguageEl, ImageAnalysisSkillLanguageEn, ImageAnalysisSkillLanguageEs, ImageAnalysisSkillLanguageEt, ImageAnalysisSkillLanguageEu, ImageAnalysisSkillLanguageFi, ImageAnalysisSkillLanguageFr, ImageAnalysisSkillLanguageGa, ImageAnalysisSkillLanguageGl, ImageAnalysisSkillLanguageHe, ImageAnalysisSkillLanguageHi, ImageAnalysisSkillLanguageHr, ImageAnalysisSkillLanguageHu, ImageAnalysisSkillLanguageID, ImageAnalysisSkillLanguageIt, ImageAnalysisSkillLanguageJa, ImageAnalysisSkillLanguageKk, ImageAnalysisSkillLanguageKo, ImageAnalysisSkillLanguageLt, ImageAnalysisSkillLanguageLv, ImageAnalysisSkillLanguageMk, ImageAnalysisSkillLanguageMs, ImageAnalysisSkillLanguageNb, ImageAnalysisSkillLanguageNl, ImageAnalysisSkillLanguagePl, ImageAnalysisSkillLanguagePrs, ImageAnalysisSkillLanguagePt, ImageAnalysisSkillLanguagePtBR, ImageAnalysisSkillLanguagePtPT, ImageAnalysisSkillLanguageRo, ImageAnalysisSkillLanguageRu, ImageAnalysisSkillLanguageSk, ImageAnalysisSkillLanguageSl, ImageAnalysisSkillLanguageSrCyrl, ImageAnalysisSkillLanguageSrLatn, ImageAnalysisSkillLanguageSv, ImageAnalysisSkillLanguageTh, ImageAnalysisSkillLanguageTr, ImageAnalysisSkillLanguageUk, ImageAnalysisSkillLanguageVi, ImageAnalysisSkillLanguageZh, ImageAnalysisSkillLanguageZhHans, ImageAnalysisSkillLanguageZhHant}
}

// ImageDetail enumerates the values for image detail.
type ImageDetail string

const (
	// ImageDetailCelebrities Details recognized as celebrities.
	ImageDetailCelebrities ImageDetail = "celebrities"
	// ImageDetailLandmarks Details recognized as landmarks.
	ImageDetailLandmarks ImageDetail = "landmarks"
)

// PossibleImageDetailValues returns an array of possible values for the ImageDetail const type.
func PossibleImageDetailValues() []ImageDetail {
	return []ImageDetail{ImageDetailCelebrities, ImageDetailLandmarks}
}

// IndexProjectionMode enumerates the values for index projection mode.
type IndexProjectionMode string

const (
	// IndexProjectionModeIncludeIndexingParentDocuments The source document will be written into the indexer's
	// target index. This is the default pattern.
	IndexProjectionModeIncludeIndexingParentDocuments IndexProjectionMode = "includeIndexingParentDocuments"
	// IndexProjectionModeSkipIndexingParentDocuments The source document will be skipped from writing into the
	// indexer's target index.
	IndexProjectionModeSkipIndexingParentDocuments IndexProjectionMode = "skipIndexingParentDocuments"
)

// PossibleIndexProjectionModeValues returns an array of possible values for the IndexProjectionMode const type.
func PossibleIndexProjectionModeValues() []IndexProjectionMode {
	return []IndexProjectionMode{IndexProjectionModeIncludeIndexingParentDocuments, IndexProjectionModeSkipIndexingParentDocuments}
}

// IndexerDataSourceType enumerates the values for indexer data source type.
type IndexerDataSourceType string

const (
	// IndexerDataSourceTypeAdlsGen2 Indicates an ADLS Gen2 datasource.
	IndexerDataSourceTypeAdlsGen2 IndexerDataSourceType = "adlsgen2"
	// IndexerDataSourceTypeAzureBlob Indicates an Azure Blob datasource.
	IndexerDataSourceTypeAzureBlob IndexerDataSourceType = "azureblob"
	// IndexerDataSourceTypeAzureSQL Indicates an Azure SQL datasource.
	IndexerDataSourceTypeAzureSQL IndexerDataSourceType = "azuresql"
	// IndexerDataSourceTypeAzureTable Indicates an Azure Table datasource.
	IndexerDataSourceTypeAzureTable IndexerDataSourceType = "azuretable"
	// IndexerDataSourceTypeCosmosDb Indicates a CosmosDB datasource.
	IndexerDataSourceTypeCosmosDb IndexerDataSourceType = "cosmosdb"
	// IndexerDataSourceTypeMySQL Indicates a MySql datasource.
	IndexerDataSourceTypeMySQL IndexerDataSourceType = "mysql"
)

// PossibleIndexerDataSourceTypeValues returns an array of possible values for the IndexerDataSourceType const type.
func PossibleIndexerDataSourceTypeValues() []IndexerDataSourceType {
	return []IndexerDataSourceType{IndexerDataSourceTypeAdlsGen2, IndexerDataSourceTypeAzureBlob, IndexerDataSourceTypeAzureSQL, IndexerDataSourceTypeAzureTable, IndexerDataSourceTypeCosmosDb, IndexerDataSourceTypeMySQL}
}

// IndexerExecutionEnvironment enumerates the values for indexer execution environment.
type IndexerExecutionEnvironment string

const (
	// IndexerExecutionEnvironmentPrivate Indicates that the indexer should run with the environment
	// provisioned specifically for the search service. This should only be specified as the execution
	// environment if the indexer needs to access resources securely over shared private link resources.
	IndexerExecutionEnvironmentPrivate IndexerExecutionEnvironment = "private"
	// IndexerExecutionEnvironmentStandard Indicates that the search service can determine where the indexer
	// should execute. This is the default environment when nothing is specified and is the recommended value.
	IndexerExecutionEnvironmentStandard IndexerExecutionEnvironment = "standard"
)

// PossibleIndexerExecutionEnvironmentValues returns an array of possible values for the IndexerExecutionEnvironment const type.
func PossibleIndexerExecutionEnvironmentValues() []IndexerExecutionEnvironment {
	return []IndexerExecutionEnvironment{IndexerExecutionEnvironmentPrivate, IndexerExecutionEnvironmentStandard}
}

// IndexerExecutionStatus enumerates the values for indexer execution status.
type IndexerExecutionStatus string

const (
	// IndexerExecutionStatusInProgress Indexer execution is in progress.
	IndexerExecutionStatusInProgress IndexerExecutionStatus = "inProgress"
	// IndexerExecutionStatusReset Indexer has been reset.
	IndexerExecutionStatusReset IndexerExecutionStatus = "reset"
	// IndexerExecutionStatusSuccess Indexer execution completed successfully.
	IndexerExecutionStatusSuccess IndexerExecutionStatus = "success"
	// IndexerExecutionStatusTransientFailure An indexer invocation has failed, but the failure may be
	// transient. Indexer invocations will continue per schedule.
	IndexerExecutionStatusTransientFailure IndexerExecutionStatus = "transientFailure"
)

// PossibleIndexerExecutionStatusValues returns an array of possible values for the IndexerExecutionStatus const type.
func PossibleIndexerExecutionStatusValues() []IndexerExecutionStatus {
	return []IndexerExecutionStatus{IndexerExecutionStatusInProgress, IndexerExecutionStatusReset, IndexerExecutionStatusSuccess, IndexerExecutionStatusTransientFailure}
}

// IndexerExecutionStatusDetail enumerates the values for indexer execution status detail.
type IndexerExecutionStatusDetail string

const (
	// IndexerExecutionStatusDetailResetDocs Indicates that the reset that occurred was for a call to
	// ResetDocs.
	IndexerExecutionStatusDetailResetDocs IndexerExecutionStatusDetail = "resetDocs"
)

// PossibleIndexerExecutionStatusDetailValues returns an array of possible values for the IndexerExecutionStatusDetail const type.
func PossibleIndexerExecutionStatusDetailValues() []IndexerExecutionStatusDetail {
	return []IndexerExecutionStatusDetail{IndexerExecutionStatusDetailResetDocs}
}

// IndexerStatus enumerates the values for indexer status.
type IndexerStatus string

const (
	// IndexerStatusError Indicates that the indexer experienced an error that cannot be corrected without
	// human intervention.
	IndexerStatusError IndexerStatus = "error"
	// IndexerStatusRunning Indicates that the indexer is running normally.
	IndexerStatusRunning IndexerStatus = "running"
	// IndexerStatusUnknown Indicates that the indexer is in an unknown state.
	IndexerStatusUnknown IndexerStatus = "unknown"
)

// PossibleIndexerStatusValues returns an array of possible values for the IndexerStatus const type.
func PossibleIndexerStatusValues() []IndexerStatus {
	return []IndexerStatus{IndexerStatusError, IndexerStatusRunning, IndexerStatusUnknown}
}

// IndexingMode enumerates the values for indexing mode.
type IndexingMode string

const (
	// IndexingModeIndexingAllDocs The indexer is indexing all documents in the datasource.
	IndexingModeIndexingAllDocs IndexingMode = "indexingAllDocs"
	// IndexingModeIndexingResetDocs The indexer is indexing selective, reset documents in the datasource. The
	// documents being indexed are defined on indexer status.
	IndexingModeIndexingResetDocs IndexingMode = "indexingResetDocs"
)

// PossibleIndexingModeValues returns an array of possible values for the IndexingMode const type.
func PossibleIndexingModeValues() []IndexingMode {
	return []IndexingMode{IndexingModeIndexingAllDocs, IndexingModeIndexingResetDocs}
}

// KeyPhraseExtractionSkillLanguage enumerates the values for key phrase extraction skill language.
type KeyPhraseExtractionSkillLanguage string

const (
	// KeyPhraseExtractionSkillLanguageDa Danish
	KeyPhraseExtractionSkillLanguageDa KeyPhraseExtractionSkillLanguage = "da"
	// KeyPhraseExtractionSkillLanguageDe German
	KeyPhraseExtractionSkillLanguageDe KeyPhraseExtractionSkillLanguage = "de"
	// KeyPhraseExtractionSkillLanguageEn English
	KeyPhraseExtractionSkillLanguageEn KeyPhraseExtractionSkillLanguage = "en"
	// KeyPhraseExtractionSkillLanguageEs Spanish
	KeyPhraseExtractionSkillLanguageEs KeyPhraseExtractionSkillLanguage = "es"
	// KeyPhraseExtractionSkillLanguageFi Finnish
	KeyPhraseExtractionSkillLanguageFi KeyPhraseExtractionSkillLanguage = "fi"
	// KeyPhraseExtractionSkillLanguageFr French
	KeyPhraseExtractionSkillLanguageFr KeyPhraseExtractionSkillLanguage = "fr"
	// KeyPhraseExtractionSkillLanguageIt Italian
	KeyPhraseExtractionSkillLanguageIt KeyPhraseExtractionSkillLanguage = "it"
	// KeyPhraseExtractionSkillLanguageJa Japanese
	KeyPhraseExtractionSkillLanguageJa KeyPhraseExtractionSkillLanguage = "ja"
	// KeyPhraseExtractionSkillLanguageKo Korean
	KeyPhraseExtractionSkillLanguageKo KeyPhraseExtractionSkillLanguage = "ko"
	// KeyPhraseExtractionSkillLanguageNl Dutch
	KeyPhraseExtractionSkillLanguageNl KeyPhraseExtractionSkillLanguage = "nl"
	// KeyPhraseExtractionSkillLanguageNo Norwegian (Bokmaal)
	KeyPhraseExtractionSkillLanguageNo KeyPhraseExtractionSkillLanguage = "no"
	// KeyPhraseExtractionSkillLanguagePl Polish
	KeyPhraseExtractionSkillLanguagePl KeyPhraseExtractionSkillLanguage = "pl"
	// KeyPhraseExtractionSkillLanguagePtBR Portuguese (Brazil)
	KeyPhraseExtractionSkillLanguagePtBR KeyPhraseExtractionSkillLanguage = "pt-BR"
	// KeyPhraseExtractionSkillLanguagePtPT Portuguese (Portugal)
	KeyPhraseExtractionSkillLanguagePtPT KeyPhraseExtractionSkillLanguage = "pt-PT"
	// KeyPhraseExtractionSkillLanguageRu Russian
	KeyPhraseExtractionSkillLanguageRu KeyPhraseExtractionSkillLanguage = "ru"
	// KeyPhraseExtractionSkillLanguageSv Swedish
	KeyPhraseExtractionSkillLanguageSv KeyPhraseExtractionSkillLanguage = "sv"
)

// PossibleKeyPhraseExtractionSkillLanguageValues returns an array of possible values for the KeyPhraseExtractionSkillLanguage const type.
func PossibleKeyPhraseExtractionSkillLanguageValues() []KeyPhraseExtractionSkillLanguage {
	return []KeyPhraseExtractionSkillLanguage{KeyPhraseExtractionSkillLanguageDa, KeyPhraseExtractionSkillLanguageDe, KeyPhraseExtractionSkillLanguageEn, KeyPhraseExtractionSkillLanguageEs, KeyPhraseExtractionSkillLanguageFi, KeyPhraseExtractionSkillLanguageFr, KeyPhraseExtractionSkillLanguageIt, KeyPhraseExtractionSkillLanguageJa, KeyPhraseExtractionSkillLanguageKo, KeyPhraseExtractionSkillLanguageNl, KeyPhraseExtractionSkillLanguageNo, KeyPhraseExtractionSkillLanguagePl, KeyPhraseExtractionSkillLanguagePtBR, KeyPhraseExtractionSkillLanguagePtPT, KeyPhraseExtractionSkillLanguageRu, KeyPhraseExtractionSkillLanguageSv}
}

// Kind enumerates the values for kind.
type Kind string

const (
	// KindExhaustiveKnn ...
	KindExhaustiveKnn Kind = "exhaustiveKnn"
	// KindHnsw ...
	KindHnsw Kind = "hnsw"
	// KindVectorSearchAlgorithmConfiguration ...
	KindVectorSearchAlgorithmConfiguration Kind = "VectorSearchAlgorithmConfiguration"
)

// PossibleKindValues returns an array of possible values for the Kind const type.
func PossibleKindValues() []Kind {
	return []Kind{KindExhaustiveKnn, KindHnsw, KindVectorSearchAlgorithmConfiguration}
}

// KindBasicVectorSearchCompressionConfiguration enumerates the values for kind basic vector search compression
// configuration.
type KindBasicVectorSearchCompressionConfiguration string

const (
	// KindBasicVectorSearchCompressionConfigurationKindScalarQuantization ...
	KindBasicVectorSearchCompressionConfigurationKindScalarQuantization KindBasicVectorSearchCompressionConfiguration = "scalarQuantization"
	// KindBasicVectorSearchCompressionConfigurationKindVectorSearchCompressionConfiguration ...
	KindBasicVectorSearchCompressionConfigurationKindVectorSearchCompressionConfiguration KindBasicVectorSearchCompressionConfiguration = "VectorSearchCompressionConfiguration"
)

// PossibleKindBasicVectorSearchCompressionConfigurationValues returns an array of possible values for the KindBasicVectorSearchCompressionConfiguration const type.
func PossibleKindBasicVectorSearchCompressionConfigurationValues() []KindBasicVectorSearchCompressionConfiguration {
	return []KindBasicVectorSearchCompressionConfiguration{KindBasicVectorSearchCompressionConfigurationKindScalarQuantization, KindBasicVectorSearchCompressionConfigurationKindVectorSearchCompressionConfiguration}
}

// KindBasicVectorSearchVectorizer enumerates the values for kind basic vector search vectorizer.
type KindBasicVectorSearchVectorizer string

const (
	// KindBasicVectorSearchVectorizerKindAzureOpenAI ...
	KindBasicVectorSearchVectorizerKindAzureOpenAI KindBasicVectorSearchVectorizer = "azureOpenAI"
	// KindBasicVectorSearchVectorizerKindCustomWebAPI ...
	KindBasicVectorSearchVectorizerKindCustomWebAPI KindBasicVectorSearchVectorizer = "customWebApi"
	// KindBasicVectorSearchVectorizerKindVectorSearchVectorizer ...
	KindBasicVectorSearchVectorizerKindVectorSearchVectorizer KindBasicVectorSearchVectorizer = "VectorSearchVectorizer"
)

// PossibleKindBasicVectorSearchVectorizerValues returns an array of possible values for the KindBasicVectorSearchVectorizer const type.
func PossibleKindBasicVectorSearchVectorizerValues() []KindBasicVectorSearchVectorizer {
	return []KindBasicVectorSearchVectorizer{KindBasicVectorSearchVectorizerKindAzureOpenAI, KindBasicVectorSearchVectorizerKindCustomWebAPI, KindBasicVectorSearchVectorizerKindVectorSearchVectorizer}
}

// LexicalAnalyzerName enumerates the values for lexical analyzer name.
type LexicalAnalyzerName string

const (
	// LexicalAnalyzerNameArLucene Lucene analyzer for Arabic.
	LexicalAnalyzerNameArLucene LexicalAnalyzerName = "ar.lucene"
	// LexicalAnalyzerNameArMicrosoft Microsoft analyzer for Arabic.
	LexicalAnalyzerNameArMicrosoft LexicalAnalyzerName = "ar.microsoft"
	// LexicalAnalyzerNameBgLucene Lucene analyzer for Bulgarian.
	LexicalAnalyzerNameBgLucene LexicalAnalyzerName = "bg.lucene"
	// LexicalAnalyzerNameBgMicrosoft Microsoft analyzer for Bulgarian.
	LexicalAnalyzerNameBgMicrosoft LexicalAnalyzerName = "bg.microsoft"
	// LexicalAnalyzerNameBnMicrosoft Microsoft analyzer for Bangla.
	LexicalAnalyzerNameBnMicrosoft LexicalAnalyzerName = "bn.microsoft"
	// LexicalAnalyzerNameCaLucene Lucene analyzer for Catalan.
	LexicalAnalyzerNameCaLucene LexicalAnalyzerName = "ca.lucene"
	// LexicalAnalyzerNameCaMicrosoft Microsoft analyzer for Catalan.
	LexicalAnalyzerNameCaMicrosoft LexicalAnalyzerName = "ca.microsoft"
	// LexicalAnalyzerNameCsLucene Lucene analyzer for Czech.
	LexicalAnalyzerNameCsLucene LexicalAnalyzerName = "cs.lucene"
	// LexicalAnalyzerNameCsMicrosoft Microsoft analyzer for Czech.
	LexicalAnalyzerNameCsMicrosoft LexicalAnalyzerName = "cs.microsoft"
	// LexicalAnalyzerNameDaLucene Lucene analyzer for Danish.
	LexicalAnalyzerNameDaLucene LexicalAnalyzerName = "da.lucene"
	// LexicalAnalyzerNameDaMicrosoft Microsoft analyzer for Danish.
	LexicalAnalyzerNameDaMicrosoft LexicalAnalyzerName = "da.microsoft"
	// LexicalAnalyzerNameDeLucene Lucene analyzer for German.
	LexicalAnalyzerNameDeLucene LexicalAnalyzerName = "de.lucene"
	// LexicalAnalyzerNameDeMicrosoft Microsoft analyzer for German.
	LexicalAnalyzerNameDeMicrosoft LexicalAnalyzerName = "de.microsoft"
	// LexicalAnalyzerNameElLucene Lucene analyzer for Greek.
	LexicalAnalyzerNameElLucene LexicalAnalyzerName = "el.lucene"
	// LexicalAnalyzerNameElMicrosoft Microsoft analyzer for Greek.
	LexicalAnalyzerNameElMicrosoft LexicalAnalyzerName = "el.microsoft"
	// LexicalAnalyzerNameEnLucene Lucene analyzer for English.
	LexicalAnalyzerNameEnLucene LexicalAnalyzerName = "en.lucene"
	// LexicalAnalyzerNameEnMicrosoft Microsoft analyzer for English.
	LexicalAnalyzerNameEnMicrosoft LexicalAnalyzerName = "en.microsoft"
	// LexicalAnalyzerNameEsLucene Lucene analyzer for Spanish.
	LexicalAnalyzerNameEsLucene LexicalAnalyzerName = "es.lucene"
	// LexicalAnalyzerNameEsMicrosoft Microsoft analyzer for Spanish.
	LexicalAnalyzerNameEsMicrosoft LexicalAnalyzerName = "es.microsoft"
	// LexicalAnalyzerNameEtMicrosoft Microsoft analyzer for Estonian.
	LexicalAnalyzerNameEtMicrosoft LexicalAnalyzerName = "et.microsoft"
	// LexicalAnalyzerNameEuLucene Lucene analyzer for Basque.
	LexicalAnalyzerNameEuLucene LexicalAnalyzerName = "eu.lucene"
	// LexicalAnalyzerNameFaLucene Lucene analyzer for Persian.
	LexicalAnalyzerNameFaLucene LexicalAnalyzerName = "fa.lucene"
	// LexicalAnalyzerNameFiLucene Lucene analyzer for Finnish.
	LexicalAnalyzerNameFiLucene LexicalAnalyzerName = "fi.lucene"
	// LexicalAnalyzerNameFiMicrosoft Microsoft analyzer for Finnish.
	LexicalAnalyzerNameFiMicrosoft LexicalAnalyzerName = "fi.microsoft"
	// LexicalAnalyzerNameFrLucene Lucene analyzer for French.
	LexicalAnalyzerNameFrLucene LexicalAnalyzerName = "fr.lucene"
	// LexicalAnalyzerNameFrMicrosoft Microsoft analyzer for French.
	LexicalAnalyzerNameFrMicrosoft LexicalAnalyzerName = "fr.microsoft"
	// LexicalAnalyzerNameGaLucene Lucene analyzer for Irish.
	LexicalAnalyzerNameGaLucene LexicalAnalyzerName = "ga.lucene"
	// LexicalAnalyzerNameGlLucene Lucene analyzer for Galician.
	LexicalAnalyzerNameGlLucene LexicalAnalyzerName = "gl.lucene"
	// LexicalAnalyzerNameGuMicrosoft Microsoft analyzer for Gujarati.
	LexicalAnalyzerNameGuMicrosoft LexicalAnalyzerName = "gu.microsoft"
	// LexicalAnalyzerNameHeMicrosoft Microsoft analyzer for Hebrew.
	LexicalAnalyzerNameHeMicrosoft LexicalAnalyzerName = "he.microsoft"
	// LexicalAnalyzerNameHiLucene Lucene analyzer for Hindi.
	LexicalAnalyzerNameHiLucene LexicalAnalyzerName = "hi.lucene"
	// LexicalAnalyzerNameHiMicrosoft Microsoft analyzer for Hindi.
	LexicalAnalyzerNameHiMicrosoft LexicalAnalyzerName = "hi.microsoft"
	// LexicalAnalyzerNameHrMicrosoft Microsoft analyzer for Croatian.
	LexicalAnalyzerNameHrMicrosoft LexicalAnalyzerName = "hr.microsoft"
	// LexicalAnalyzerNameHuLucene Lucene analyzer for Hungarian.
	LexicalAnalyzerNameHuLucene LexicalAnalyzerName = "hu.lucene"
	// LexicalAnalyzerNameHuMicrosoft Microsoft analyzer for Hungarian.
	LexicalAnalyzerNameHuMicrosoft LexicalAnalyzerName = "hu.microsoft"
	// LexicalAnalyzerNameHyLucene Lucene analyzer for Armenian.
	LexicalAnalyzerNameHyLucene LexicalAnalyzerName = "hy.lucene"
	// LexicalAnalyzerNameIDLucene Lucene analyzer for Indonesian.
	LexicalAnalyzerNameIDLucene LexicalAnalyzerName = "id.lucene"
	// LexicalAnalyzerNameIDMicrosoft Microsoft analyzer for Indonesian (Bahasa).
	LexicalAnalyzerNameIDMicrosoft LexicalAnalyzerName = "id.microsoft"
	// LexicalAnalyzerNameIsMicrosoft Microsoft analyzer for Icelandic.
	LexicalAnalyzerNameIsMicrosoft LexicalAnalyzerName = "is.microsoft"
	// LexicalAnalyzerNameItLucene Lucene analyzer for Italian.
	LexicalAnalyzerNameItLucene LexicalAnalyzerName = "it.lucene"
	// LexicalAnalyzerNameItMicrosoft Microsoft analyzer for Italian.
	LexicalAnalyzerNameItMicrosoft LexicalAnalyzerName = "it.microsoft"
	// LexicalAnalyzerNameJaLucene Lucene analyzer for Japanese.
	LexicalAnalyzerNameJaLucene LexicalAnalyzerName = "ja.lucene"
	// LexicalAnalyzerNameJaMicrosoft Microsoft analyzer for Japanese.
	LexicalAnalyzerNameJaMicrosoft LexicalAnalyzerName = "ja.microsoft"
	// LexicalAnalyzerNameKeyword Treats the entire content of a field as a single token. This is useful for
	// data like zip codes, ids, and some product names. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/KeywordAnalyzer.html
	LexicalAnalyzerNameKeyword LexicalAnalyzerName = "keyword"
	// LexicalAnalyzerNameKnMicrosoft Microsoft analyzer for Kannada.
	LexicalAnalyzerNameKnMicrosoft LexicalAnalyzerName = "kn.microsoft"
	// LexicalAnalyzerNameKoLucene Lucene analyzer for Korean.
	LexicalAnalyzerNameKoLucene LexicalAnalyzerName = "ko.lucene"
	// LexicalAnalyzerNameKoMicrosoft Microsoft analyzer for Korean.
	LexicalAnalyzerNameKoMicrosoft LexicalAnalyzerName = "ko.microsoft"
	// LexicalAnalyzerNameLtMicrosoft Microsoft analyzer for Lithuanian.
	LexicalAnalyzerNameLtMicrosoft LexicalAnalyzerName = "lt.microsoft"
	// LexicalAnalyzerNameLvLucene Lucene analyzer for Latvian.
	LexicalAnalyzerNameLvLucene LexicalAnalyzerName = "lv.lucene"
	// LexicalAnalyzerNameLvMicrosoft Microsoft analyzer for Latvian.
	LexicalAnalyzerNameLvMicrosoft LexicalAnalyzerName = "lv.microsoft"
	// LexicalAnalyzerNameMlMicrosoft Microsoft analyzer for Malayalam.
	LexicalAnalyzerNameMlMicrosoft LexicalAnalyzerName = "ml.microsoft"
	// LexicalAnalyzerNameMrMicrosoft Microsoft analyzer for Marathi.
	LexicalAnalyzerNameMrMicrosoft LexicalAnalyzerName = "mr.microsoft"
	// LexicalAnalyzerNameMsMicrosoft Microsoft analyzer for Malay (Latin).
	LexicalAnalyzerNameMsMicrosoft LexicalAnalyzerName = "ms.microsoft"
	// LexicalAnalyzerNameNbMicrosoft Microsoft analyzer for Norwegian (Bokmål).
	LexicalAnalyzerNameNbMicrosoft LexicalAnalyzerName = "nb.microsoft"
	// LexicalAnalyzerNameNlLucene Lucene analyzer for Dutch.
	LexicalAnalyzerNameNlLucene LexicalAnalyzerName = "nl.lucene"
	// LexicalAnalyzerNameNlMicrosoft Microsoft analyzer for Dutch.
	LexicalAnalyzerNameNlMicrosoft LexicalAnalyzerName = "nl.microsoft"
	// LexicalAnalyzerNameNoLucene Lucene analyzer for Norwegian.
	LexicalAnalyzerNameNoLucene LexicalAnalyzerName = "no.lucene"
	// LexicalAnalyzerNamePaMicrosoft Microsoft analyzer for Punjabi.
	LexicalAnalyzerNamePaMicrosoft LexicalAnalyzerName = "pa.microsoft"
	// LexicalAnalyzerNamePattern Flexibly separates text into terms via a regular expression pattern. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.html
	LexicalAnalyzerNamePattern LexicalAnalyzerName = "pattern"
	// LexicalAnalyzerNamePlLucene Lucene analyzer for Polish.
	LexicalAnalyzerNamePlLucene LexicalAnalyzerName = "pl.lucene"
	// LexicalAnalyzerNamePlMicrosoft Microsoft analyzer for Polish.
	LexicalAnalyzerNamePlMicrosoft LexicalAnalyzerName = "pl.microsoft"
	// LexicalAnalyzerNamePtBrLucene Lucene analyzer for Portuguese (Brazil).
	LexicalAnalyzerNamePtBrLucene LexicalAnalyzerName = "pt-BR.lucene"
	// LexicalAnalyzerNamePtBrMicrosoft Microsoft analyzer for Portuguese (Brazil).
	LexicalAnalyzerNamePtBrMicrosoft LexicalAnalyzerName = "pt-BR.microsoft"
	// LexicalAnalyzerNamePtPtLucene Lucene analyzer for Portuguese (Portugal).
	LexicalAnalyzerNamePtPtLucene LexicalAnalyzerName = "pt-PT.lucene"
	// LexicalAnalyzerNamePtPtMicrosoft Microsoft analyzer for Portuguese (Portugal).
	LexicalAnalyzerNamePtPtMicrosoft LexicalAnalyzerName = "pt-PT.microsoft"
	// LexicalAnalyzerNameRoLucene Lucene analyzer for Romanian.
	LexicalAnalyzerNameRoLucene LexicalAnalyzerName = "ro.lucene"
	// LexicalAnalyzerNameRoMicrosoft Microsoft analyzer for Romanian.
	LexicalAnalyzerNameRoMicrosoft LexicalAnalyzerName = "ro.microsoft"
	// LexicalAnalyzerNameRuLucene Lucene analyzer for Russian.
	LexicalAnalyzerNameRuLucene LexicalAnalyzerName = "ru.lucene"
	// LexicalAnalyzerNameRuMicrosoft Microsoft analyzer for Russian.
	LexicalAnalyzerNameRuMicrosoft LexicalAnalyzerName = "ru.microsoft"
	// LexicalAnalyzerNameSimple Divides text at non-letters and converts them to lower case. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/SimpleAnalyzer.html
	LexicalAnalyzerNameSimple LexicalAnalyzerName = "simple"
	// LexicalAnalyzerNameSkMicrosoft Microsoft analyzer for Slovak.
	LexicalAnalyzerNameSkMicrosoft LexicalAnalyzerName = "sk.microsoft"
	// LexicalAnalyzerNameSlMicrosoft Microsoft analyzer for Slovenian.
	LexicalAnalyzerNameSlMicrosoft LexicalAnalyzerName = "sl.microsoft"
	// LexicalAnalyzerNameSrCyrillicMicrosoft Microsoft analyzer for Serbian (Cyrillic).
	LexicalAnalyzerNameSrCyrillicMicrosoft LexicalAnalyzerName = "sr-cyrillic.microsoft"
	// LexicalAnalyzerNameSrLatinMicrosoft Microsoft analyzer for Serbian (Latin).
	LexicalAnalyzerNameSrLatinMicrosoft LexicalAnalyzerName = "sr-latin.microsoft"
	// LexicalAnalyzerNameStandardASCIIFoldingLucene Standard ASCII Folding Lucene analyzer. See
	// https://docs.microsoft.com/rest/api/searchservice/Custom-analyzers-in-Azure-Search#Analyzers
	LexicalAnalyzerNameStandardASCIIFoldingLucene LexicalAnalyzerName = "standardasciifolding.lucene"
	// LexicalAnalyzerNameStandardLucene Standard Lucene analyzer.
	LexicalAnalyzerNameStandardLucene LexicalAnalyzerName = "standard.lucene"
	// LexicalAnalyzerNameStop Divides text at non-letters; Applies the lowercase and stopword token filters.
	// See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/StopAnalyzer.html
	LexicalAnalyzerNameStop LexicalAnalyzerName = "stop"
	// LexicalAnalyzerNameSvLucene Lucene analyzer for Swedish.
	LexicalAnalyzerNameSvLucene LexicalAnalyzerName = "sv.lucene"
	// LexicalAnalyzerNameSvMicrosoft Microsoft analyzer for Swedish.
	LexicalAnalyzerNameSvMicrosoft LexicalAnalyzerName = "sv.microsoft"
	// LexicalAnalyzerNameTaMicrosoft Microsoft analyzer for Tamil.
	LexicalAnalyzerNameTaMicrosoft LexicalAnalyzerName = "ta.microsoft"
	// LexicalAnalyzerNameTeMicrosoft Microsoft analyzer for Telugu.
	LexicalAnalyzerNameTeMicrosoft LexicalAnalyzerName = "te.microsoft"
	// LexicalAnalyzerNameThLucene Lucene analyzer for Thai.
	LexicalAnalyzerNameThLucene LexicalAnalyzerName = "th.lucene"
	// LexicalAnalyzerNameThMicrosoft Microsoft analyzer for Thai.
	LexicalAnalyzerNameThMicrosoft LexicalAnalyzerName = "th.microsoft"
	// LexicalAnalyzerNameTrLucene Lucene analyzer for Turkish.
	LexicalAnalyzerNameTrLucene LexicalAnalyzerName = "tr.lucene"
	// LexicalAnalyzerNameTrMicrosoft Microsoft analyzer for Turkish.
	LexicalAnalyzerNameTrMicrosoft LexicalAnalyzerName = "tr.microsoft"
	// LexicalAnalyzerNameUkMicrosoft Microsoft analyzer for Ukrainian.
	LexicalAnalyzerNameUkMicrosoft LexicalAnalyzerName = "uk.microsoft"
	// LexicalAnalyzerNameUrMicrosoft Microsoft analyzer for Urdu.
	LexicalAnalyzerNameUrMicrosoft LexicalAnalyzerName = "ur.microsoft"
	// LexicalAnalyzerNameViMicrosoft Microsoft analyzer for Vietnamese.
	LexicalAnalyzerNameViMicrosoft LexicalAnalyzerName = "vi.microsoft"
	// LexicalAnalyzerNameWhitespace An analyzer that uses the whitespace tokenizer. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/WhitespaceAnalyzer.html
	LexicalAnalyzerNameWhitespace LexicalAnalyzerName = "whitespace"
	// LexicalAnalyzerNameZhHansLucene Lucene analyzer for Chinese (Simplified).
	LexicalAnalyzerNameZhHansLucene LexicalAnalyzerName = "zh-Hans.lucene"
	// LexicalAnalyzerNameZhHansMicrosoft Microsoft analyzer for Chinese (Simplified).
	LexicalAnalyzerNameZhHansMicrosoft LexicalAnalyzerName = "zh-Hans.microsoft"
	// LexicalAnalyzerNameZhHantLucene Lucene analyzer for Chinese (Traditional).
	LexicalAnalyzerNameZhHantLucene LexicalAnalyzerName = "zh-Hant.lucene"
	// LexicalAnalyzerNameZhHantMicrosoft Microsoft analyzer for Chinese (Traditional).
	LexicalAnalyzerNameZhHantMicrosoft LexicalAnalyzerName = "zh-Hant.microsoft"
)

// PossibleLexicalAnalyzerNameValues returns an array of possible values for the LexicalAnalyzerName const type.
func PossibleLexicalAnalyzerNameValues() []LexicalAnalyzerName {
	return []LexicalAnalyzerName{LexicalAnalyzerNameArLucene, LexicalAnalyzerNameArMicrosoft, LexicalAnalyzerNameBgLucene, LexicalAnalyzerNameBgMicrosoft, LexicalAnalyzerNameBnMicrosoft, LexicalAnalyzerNameCaLucene, LexicalAnalyzerNameCaMicrosoft, LexicalAnalyzerNameCsLucene, LexicalAnalyzerNameCsMicrosoft, LexicalAnalyzerNameDaLucene, LexicalAnalyzerNameDaMicrosoft, LexicalAnalyzerNameDeLucene, LexicalAnalyzerNameDeMicrosoft, LexicalAnalyzerNameElLucene, LexicalAnalyzerNameElMicrosoft, LexicalAnalyzerNameEnLucene, LexicalAnalyzerNameEnMicrosoft, LexicalAnalyzerNameEsLucene, LexicalAnalyzerNameEsMicrosoft, LexicalAnalyzerNameEtMicrosoft, LexicalAnalyzerNameEuLucene, LexicalAnalyzerNameFaLucene, LexicalAnalyzerNameFiLucene, LexicalAnalyzerNameFiMicrosoft, LexicalAnalyzerNameFrLucene, LexicalAnalyzerNameFrMicrosoft, LexicalAnalyzerNameGaLucene, LexicalAnalyzerNameGlLucene, LexicalAnalyzerNameGuMicrosoft, LexicalAnalyzerNameHeMicrosoft, LexicalAnalyzerNameHiLucene, LexicalAnalyzerNameHiMicrosoft, LexicalAnalyzerNameHrMicrosoft, LexicalAnalyzerNameHuLucene, LexicalAnalyzerNameHuMicrosoft, LexicalAnalyzerNameHyLucene, LexicalAnalyzerNameIDLucene, LexicalAnalyzerNameIDMicrosoft, LexicalAnalyzerNameIsMicrosoft, LexicalAnalyzerNameItLucene, LexicalAnalyzerNameItMicrosoft, LexicalAnalyzerNameJaLucene, LexicalAnalyzerNameJaMicrosoft, LexicalAnalyzerNameKeyword, LexicalAnalyzerNameKnMicrosoft, LexicalAnalyzerNameKoLucene, LexicalAnalyzerNameKoMicrosoft, LexicalAnalyzerNameLtMicrosoft, LexicalAnalyzerNameLvLucene, LexicalAnalyzerNameLvMicrosoft, LexicalAnalyzerNameMlMicrosoft, LexicalAnalyzerNameMrMicrosoft, LexicalAnalyzerNameMsMicrosoft, LexicalAnalyzerNameNbMicrosoft, LexicalAnalyzerNameNlLucene, LexicalAnalyzerNameNlMicrosoft, LexicalAnalyzerNameNoLucene, LexicalAnalyzerNamePaMicrosoft, LexicalAnalyzerNamePattern, LexicalAnalyzerNamePlLucene, LexicalAnalyzerNamePlMicrosoft, LexicalAnalyzerNamePtBrLucene, LexicalAnalyzerNamePtBrMicrosoft, LexicalAnalyzerNamePtPtLucene, LexicalAnalyzerNamePtPtMicrosoft, LexicalAnalyzerNameRoLucene, LexicalAnalyzerNameRoMicrosoft, LexicalAnalyzerNameRuLucene, LexicalAnalyzerNameRuMicrosoft, LexicalAnalyzerNameSimple, LexicalAnalyzerNameSkMicrosoft, LexicalAnalyzerNameSlMicrosoft, LexicalAnalyzerNameSrCyrillicMicrosoft, LexicalAnalyzerNameSrLatinMicrosoft, LexicalAnalyzerNameStandardASCIIFoldingLucene, LexicalAnalyzerNameStandardLucene, LexicalAnalyzerNameStop, LexicalAnalyzerNameSvLucene, LexicalAnalyzerNameSvMicrosoft, LexicalAnalyzerNameTaMicrosoft, LexicalAnalyzerNameTeMicrosoft, LexicalAnalyzerNameThLucene, LexicalAnalyzerNameThMicrosoft, LexicalAnalyzerNameTrLucene, LexicalAnalyzerNameTrMicrosoft, LexicalAnalyzerNameUkMicrosoft, LexicalAnalyzerNameUrMicrosoft, LexicalAnalyzerNameViMicrosoft, LexicalAnalyzerNameWhitespace, LexicalAnalyzerNameZhHansLucene, LexicalAnalyzerNameZhHansMicrosoft, LexicalAnalyzerNameZhHantLucene, LexicalAnalyzerNameZhHantMicrosoft}
}

// LexicalNormalizerName enumerates the values for lexical normalizer name.
type LexicalNormalizerName string

const (
	// LexicalNormalizerNameASCIIFolding Converts alphabetic, numeric, and symbolic Unicode characters which
	// are not in the first 127 ASCII characters (the "Basic Latin" Unicode block) into their ASCII
	// equivalents, if such equivalents exist. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.html
	LexicalNormalizerNameASCIIFolding LexicalNormalizerName = "asciifolding"
	// LexicalNormalizerNameElision Removes elisions. For example, "l'avion" (the plane) will be converted to
	// "avion" (plane). See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/util/ElisionFilter.html
	LexicalNormalizerNameElision LexicalNormalizerName = "elision"
	// LexicalNormalizerNameLowercase Normalizes token text to lowercase. See
	// https://lucene.apache.org/core/6_6_1/analyzers-common/org/apache/lucene/analysis/core/LowerCaseFilter.html
	LexicalNormalizerNameLowercase LexicalNormalizerName = "lowercase"
	// LexicalNormalizerNameStandard Standard normalizer, which consists of lowercase and asciifolding. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/reverse/ReverseStringFilter.html
	LexicalNormalizerNameStandard LexicalNormalizerName = "standard"
	// LexicalNormalizerNameUppercase Normalizes token text to uppercase. See
	// https://lucene.apache.org/core/6_6_1/analyzers-common/org/apache/lucene/analysis/core/UpperCaseFilter.html
	LexicalNormalizerNameUppercase LexicalNormalizerName = "uppercase"
)

// PossibleLexicalNormalizerNameValues returns an array of possible values for the LexicalNormalizerName const type.
func PossibleLexicalNormalizerNameValues() []LexicalNormalizerName {
	return []LexicalNormalizerName{LexicalNormalizerNameASCIIFolding, LexicalNormalizerNameElision, LexicalNormalizerNameLowercase, LexicalNormalizerNameStandard, LexicalNormalizerNameUppercase}
}

// LexicalTokenizerName enumerates the values for lexical tokenizer name.
type LexicalTokenizerName string

const (
	// LexicalTokenizerNameClassic Grammar-based tokenizer that is suitable for processing most
	// European-language documents. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/ClassicTokenizer.html
	LexicalTokenizerNameClassic LexicalTokenizerName = "classic"
	// LexicalTokenizerNameEdgeNGram Tokenizes the input from an edge into n-grams of the given size(s). See
	// https://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.html
	LexicalTokenizerNameEdgeNGram LexicalTokenizerName = "edgeNGram"
	// LexicalTokenizerNameKeyword Emits the entire input as a single token. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/KeywordTokenizer.html
	LexicalTokenizerNameKeyword LexicalTokenizerName = "keyword_v2"
	// LexicalTokenizerNameLetter Divides text at non-letters. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/LetterTokenizer.html
	LexicalTokenizerNameLetter LexicalTokenizerName = "letter"
	// LexicalTokenizerNameLowercase Divides text at non-letters and converts them to lower case. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/LowerCaseTokenizer.html
	LexicalTokenizerNameLowercase LexicalTokenizerName = "lowercase"
	// LexicalTokenizerNameMicrosoftLanguageStemmingTokenizer Divides text using language-specific rules and
	// reduces words to their base forms.
	LexicalTokenizerNameMicrosoftLanguageStemmingTokenizer LexicalTokenizerName = "microsoft_language_stemming_tokenizer"
	// LexicalTokenizerNameMicrosoftLanguageTokenizer Divides text using language-specific rules.
	LexicalTokenizerNameMicrosoftLanguageTokenizer LexicalTokenizerName = "microsoft_language_tokenizer"
	// LexicalTokenizerNameNGram Tokenizes the input into n-grams of the given size(s). See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/NGramTokenizer.html
	LexicalTokenizerNameNGram LexicalTokenizerName = "nGram"
	// LexicalTokenizerNamePathHierarchy Tokenizer for path-like hierarchies. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/path/PathHierarchyTokenizer.html
	LexicalTokenizerNamePathHierarchy LexicalTokenizerName = "path_hierarchy_v2"
	// LexicalTokenizerNamePattern Tokenizer that uses regex pattern matching to construct distinct tokens. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/pattern/PatternTokenizer.html
	LexicalTokenizerNamePattern LexicalTokenizerName = "pattern"
	// LexicalTokenizerNameStandard Standard Lucene analyzer; Composed of the standard tokenizer, lowercase
	// filter and stop filter. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/StandardTokenizer.html
	LexicalTokenizerNameStandard LexicalTokenizerName = "standard_v2"
	// LexicalTokenizerNameUaxURLEmail Tokenizes urls and emails as one token. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer.html
	LexicalTokenizerNameUaxURLEmail LexicalTokenizerName = "uax_url_email"
	// LexicalTokenizerNameWhitespace Divides text at whitespace. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/WhitespaceTokenizer.html
	LexicalTokenizerNameWhitespace LexicalTokenizerName = "whitespace"
)

// PossibleLexicalTokenizerNameValues returns an array of possible values for the LexicalTokenizerName const type.
func PossibleLexicalTokenizerNameValues() []LexicalTokenizerName {
	return []LexicalTokenizerName{LexicalTokenizerNameClassic, LexicalTokenizerNameEdgeNGram, LexicalTokenizerNameKeyword, LexicalTokenizerNameLetter, LexicalTokenizerNameLowercase, LexicalTokenizerNameMicrosoftLanguageStemmingTokenizer, LexicalTokenizerNameMicrosoftLanguageTokenizer, LexicalTokenizerNameNGram, LexicalTokenizerNamePathHierarchy, LexicalTokenizerNamePattern, LexicalTokenizerNameStandard, LexicalTokenizerNameUaxURLEmail, LexicalTokenizerNameWhitespace}
}

// LineEnding enumerates the values for line ending.
type LineEnding string

const (
	// LineEndingCarriageReturn Lines are separated by a carriage return ('\r') character.
	LineEndingCarriageReturn LineEnding = "carriageReturn"
	// LineEndingCarriageReturnLineFeed Lines are separated by a carriage return and a line feed ('\r\n')
	// character.
	LineEndingCarriageReturnLineFeed LineEnding = "carriageReturnLineFeed"
	// LineEndingLineFeed Lines are separated by a single line feed ('\n') character.
	LineEndingLineFeed LineEnding = "lineFeed"
	// LineEndingSpace Lines are separated by a single space character.
	LineEndingSpace LineEnding = "space"
)

// PossibleLineEndingValues returns an array of possible values for the LineEnding const type.
func PossibleLineEndingValues() []LineEnding {
	return []LineEnding{LineEndingCarriageReturn, LineEndingCarriageReturnLineFeed, LineEndingLineFeed, LineEndingSpace}
}

// MicrosoftStemmingTokenizerLanguage enumerates the values for microsoft stemming tokenizer language.
type MicrosoftStemmingTokenizerLanguage string

const (
	// MicrosoftStemmingTokenizerLanguageArabic Selects the Microsoft stemming tokenizer for Arabic.
	MicrosoftStemmingTokenizerLanguageArabic MicrosoftStemmingTokenizerLanguage = "arabic"
	// MicrosoftStemmingTokenizerLanguageBangla Selects the Microsoft stemming tokenizer for Bangla.
	MicrosoftStemmingTokenizerLanguageBangla MicrosoftStemmingTokenizerLanguage = "bangla"
	// MicrosoftStemmingTokenizerLanguageBulgarian Selects the Microsoft stemming tokenizer for Bulgarian.
	MicrosoftStemmingTokenizerLanguageBulgarian MicrosoftStemmingTokenizerLanguage = "bulgarian"
	// MicrosoftStemmingTokenizerLanguageCatalan Selects the Microsoft stemming tokenizer for Catalan.
	MicrosoftStemmingTokenizerLanguageCatalan MicrosoftStemmingTokenizerLanguage = "catalan"
	// MicrosoftStemmingTokenizerLanguageCroatian Selects the Microsoft stemming tokenizer for Croatian.
	MicrosoftStemmingTokenizerLanguageCroatian MicrosoftStemmingTokenizerLanguage = "croatian"
	// MicrosoftStemmingTokenizerLanguageCzech Selects the Microsoft stemming tokenizer for Czech.
	MicrosoftStemmingTokenizerLanguageCzech MicrosoftStemmingTokenizerLanguage = "czech"
	// MicrosoftStemmingTokenizerLanguageDanish Selects the Microsoft stemming tokenizer for Danish.
	MicrosoftStemmingTokenizerLanguageDanish MicrosoftStemmingTokenizerLanguage = "danish"
	// MicrosoftStemmingTokenizerLanguageDutch Selects the Microsoft stemming tokenizer for Dutch.
	MicrosoftStemmingTokenizerLanguageDutch MicrosoftStemmingTokenizerLanguage = "dutch"
	// MicrosoftStemmingTokenizerLanguageEnglish Selects the Microsoft stemming tokenizer for English.
	MicrosoftStemmingTokenizerLanguageEnglish MicrosoftStemmingTokenizerLanguage = "english"
	// MicrosoftStemmingTokenizerLanguageEstonian Selects the Microsoft stemming tokenizer for Estonian.
	MicrosoftStemmingTokenizerLanguageEstonian MicrosoftStemmingTokenizerLanguage = "estonian"
	// MicrosoftStemmingTokenizerLanguageFinnish Selects the Microsoft stemming tokenizer for Finnish.
	MicrosoftStemmingTokenizerLanguageFinnish MicrosoftStemmingTokenizerLanguage = "finnish"
	// MicrosoftStemmingTokenizerLanguageFrench Selects the Microsoft stemming tokenizer for French.
	MicrosoftStemmingTokenizerLanguageFrench MicrosoftStemmingTokenizerLanguage = "french"
	// MicrosoftStemmingTokenizerLanguageGerman Selects the Microsoft stemming tokenizer for German.
	MicrosoftStemmingTokenizerLanguageGerman MicrosoftStemmingTokenizerLanguage = "german"
	// MicrosoftStemmingTokenizerLanguageGreek Selects the Microsoft stemming tokenizer for Greek.
	MicrosoftStemmingTokenizerLanguageGreek MicrosoftStemmingTokenizerLanguage = "greek"
	// MicrosoftStemmingTokenizerLanguageGujarati Selects the Microsoft stemming tokenizer for Gujarati.
	MicrosoftStemmingTokenizerLanguageGujarati MicrosoftStemmingTokenizerLanguage = "gujarati"
	// MicrosoftStemmingTokenizerLanguageHebrew Selects the Microsoft stemming tokenizer for Hebrew.
	MicrosoftStemmingTokenizerLanguageHebrew MicrosoftStemmingTokenizerLanguage = "hebrew"
	// MicrosoftStemmingTokenizerLanguageHindi Selects the Microsoft stemming tokenizer for Hindi.
	MicrosoftStemmingTokenizerLanguageHindi MicrosoftStemmingTokenizerLanguage = "hindi"
	// MicrosoftStemmingTokenizerLanguageHungarian Selects the Microsoft stemming tokenizer for Hungarian.
	MicrosoftStemmingTokenizerLanguageHungarian MicrosoftStemmingTokenizerLanguage = "hungarian"
	// MicrosoftStemmingTokenizerLanguageIcelandic Selects the Microsoft stemming tokenizer for Icelandic.
	MicrosoftStemmingTokenizerLanguageIcelandic MicrosoftStemmingTokenizerLanguage = "icelandic"
	// MicrosoftStemmingTokenizerLanguageIndonesian Selects the Microsoft stemming tokenizer for Indonesian.
	MicrosoftStemmingTokenizerLanguageIndonesian MicrosoftStemmingTokenizerLanguage = "indonesian"
	// MicrosoftStemmingTokenizerLanguageItalian Selects the Microsoft stemming tokenizer for Italian.
	MicrosoftStemmingTokenizerLanguageItalian MicrosoftStemmingTokenizerLanguage = "italian"
	// MicrosoftStemmingTokenizerLanguageKannada Selects the Microsoft stemming tokenizer for Kannada.
	MicrosoftStemmingTokenizerLanguageKannada MicrosoftStemmingTokenizerLanguage = "kannada"
	// MicrosoftStemmingTokenizerLanguageLatvian Selects the Microsoft stemming tokenizer for Latvian.
	MicrosoftStemmingTokenizerLanguageLatvian MicrosoftStemmingTokenizerLanguage = "latvian"
	// MicrosoftStemmingTokenizerLanguageLithuanian Selects the Microsoft stemming tokenizer for Lithuanian.
	MicrosoftStemmingTokenizerLanguageLithuanian MicrosoftStemmingTokenizerLanguage = "lithuanian"
	// MicrosoftStemmingTokenizerLanguageMalay Selects the Microsoft stemming tokenizer for Malay.
	MicrosoftStemmingTokenizerLanguageMalay MicrosoftStemmingTokenizerLanguage = "malay"
	// MicrosoftStemmingTokenizerLanguageMalayalam Selects the Microsoft stemming tokenizer for Malayalam.
	MicrosoftStemmingTokenizerLanguageMalayalam MicrosoftStemmingTokenizerLanguage = "malayalam"
	// MicrosoftStemmingTokenizerLanguageMarathi Selects the Microsoft stemming tokenizer for Marathi.
	MicrosoftStemmingTokenizerLanguageMarathi MicrosoftStemmingTokenizerLanguage = "marathi"
	// MicrosoftStemmingTokenizerLanguageNorwegianBokmaal Selects the Microsoft stemming tokenizer for
	// Norwegian (Bokmål).
	MicrosoftStemmingTokenizerLanguageNorwegianBokmaal MicrosoftStemmingTokenizerLanguage = "norwegianBokmaal"
	// MicrosoftStemmingTokenizerLanguagePolish Selects the Microsoft stemming tokenizer for Polish.
	MicrosoftStemmingTokenizerLanguagePolish MicrosoftStemmingTokenizerLanguage = "polish"
	// MicrosoftStemmingTokenizerLanguagePortuguese Selects the Microsoft stemming tokenizer for Portuguese.
	MicrosoftStemmingTokenizerLanguagePortuguese MicrosoftStemmingTokenizerLanguage = "portuguese"
	// MicrosoftStemmingTokenizerLanguagePortugueseBrazilian Selects the Microsoft stemming tokenizer for
	// Portuguese (Brazil).
	MicrosoftStemmingTokenizerLanguagePortugueseBrazilian MicrosoftStemmingTokenizerLanguage = "portugueseBrazilian"
	// MicrosoftStemmingTokenizerLanguagePunjabi Selects the Microsoft stemming tokenizer for Punjabi.
	MicrosoftStemmingTokenizerLanguagePunjabi MicrosoftStemmingTokenizerLanguage = "punjabi"
	// MicrosoftStemmingTokenizerLanguageRomanian Selects the Microsoft stemming tokenizer for Romanian.
	MicrosoftStemmingTokenizerLanguageRomanian MicrosoftStemmingTokenizerLanguage = "romanian"
	// MicrosoftStemmingTokenizerLanguageRussian Selects the Microsoft stemming tokenizer for Russian.
	MicrosoftStemmingTokenizerLanguageRussian MicrosoftStemmingTokenizerLanguage = "russian"
	// MicrosoftStemmingTokenizerLanguageSerbianCyrillic Selects the Microsoft stemming tokenizer for Serbian
	// (Cyrillic).
	MicrosoftStemmingTokenizerLanguageSerbianCyrillic MicrosoftStemmingTokenizerLanguage = "serbianCyrillic"
	// MicrosoftStemmingTokenizerLanguageSerbianLatin Selects the Microsoft stemming tokenizer for Serbian
	// (Latin).
	MicrosoftStemmingTokenizerLanguageSerbianLatin MicrosoftStemmingTokenizerLanguage = "serbianLatin"
	// MicrosoftStemmingTokenizerLanguageSlovak Selects the Microsoft stemming tokenizer for Slovak.
	MicrosoftStemmingTokenizerLanguageSlovak MicrosoftStemmingTokenizerLanguage = "slovak"
	// MicrosoftStemmingTokenizerLanguageSlovenian Selects the Microsoft stemming tokenizer for Slovenian.
	MicrosoftStemmingTokenizerLanguageSlovenian MicrosoftStemmingTokenizerLanguage = "slovenian"
	// MicrosoftStemmingTokenizerLanguageSpanish Selects the Microsoft stemming tokenizer for Spanish.
	MicrosoftStemmingTokenizerLanguageSpanish MicrosoftStemmingTokenizerLanguage = "spanish"
	// MicrosoftStemmingTokenizerLanguageSwedish Selects the Microsoft stemming tokenizer for Swedish.
	MicrosoftStemmingTokenizerLanguageSwedish MicrosoftStemmingTokenizerLanguage = "swedish"
	// MicrosoftStemmingTokenizerLanguageTamil Selects the Microsoft stemming tokenizer for Tamil.
	MicrosoftStemmingTokenizerLanguageTamil MicrosoftStemmingTokenizerLanguage = "tamil"
	// MicrosoftStemmingTokenizerLanguageTelugu Selects the Microsoft stemming tokenizer for Telugu.
	MicrosoftStemmingTokenizerLanguageTelugu MicrosoftStemmingTokenizerLanguage = "telugu"
	// MicrosoftStemmingTokenizerLanguageTurkish Selects the Microsoft stemming tokenizer for Turkish.
	MicrosoftStemmingTokenizerLanguageTurkish MicrosoftStemmingTokenizerLanguage = "turkish"
	// MicrosoftStemmingTokenizerLanguageUkrainian Selects the Microsoft stemming tokenizer for Ukrainian.
	MicrosoftStemmingTokenizerLanguageUkrainian MicrosoftStemmingTokenizerLanguage = "ukrainian"
	// MicrosoftStemmingTokenizerLanguageUrdu Selects the Microsoft stemming tokenizer for Urdu.
	MicrosoftStemmingTokenizerLanguageUrdu MicrosoftStemmingTokenizerLanguage = "urdu"
)

// PossibleMicrosoftStemmingTokenizerLanguageValues returns an array of possible values for the MicrosoftStemmingTokenizerLanguage const type.
func PossibleMicrosoftStemmingTokenizerLanguageValues() []MicrosoftStemmingTokenizerLanguage {
	return []MicrosoftStemmingTokenizerLanguage{MicrosoftStemmingTokenizerLanguageArabic, MicrosoftStemmingTokenizerLanguageBangla, MicrosoftStemmingTokenizerLanguageBulgarian, MicrosoftStemmingTokenizerLanguageCatalan, MicrosoftStemmingTokenizerLanguageCroatian, MicrosoftStemmingTokenizerLanguageCzech, MicrosoftStemmingTokenizerLanguageDanish, MicrosoftStemmingTokenizerLanguageDutch, MicrosoftStemmingTokenizerLanguageEnglish, MicrosoftStemmingTokenizerLanguageEstonian, MicrosoftStemmingTokenizerLanguageFinnish, MicrosoftStemmingTokenizerLanguageFrench, MicrosoftStemmingTokenizerLanguageGerman, MicrosoftStemmingTokenizerLanguageGreek, MicrosoftStemmingTokenizerLanguageGujarati, MicrosoftStemmingTokenizerLanguageHebrew, MicrosoftStemmingTokenizerLanguageHindi, MicrosoftStemmingTokenizerLanguageHungarian, MicrosoftStemmingTokenizerLanguageIcelandic, MicrosoftStemmingTokenizerLanguageIndonesian, MicrosoftStemmingTokenizerLanguageItalian, MicrosoftStemmingTokenizerLanguageKannada, MicrosoftStemmingTokenizerLanguageLatvian, MicrosoftStemmingTokenizerLanguageLithuanian, MicrosoftStemmingTokenizerLanguageMalay, MicrosoftStemmingTokenizerLanguageMalayalam, MicrosoftStemmingTokenizerLanguageMarathi, MicrosoftStemmingTokenizerLanguageNorwegianBokmaal, MicrosoftStemmingTokenizerLanguagePolish, MicrosoftStemmingTokenizerLanguagePortuguese, MicrosoftStemmingTokenizerLanguagePortugueseBrazilian, MicrosoftStemmingTokenizerLanguagePunjabi, MicrosoftStemmingTokenizerLanguageRomanian, MicrosoftStemmingTokenizerLanguageRussian, MicrosoftStemmingTokenizerLanguageSerbianCyrillic, MicrosoftStemmingTokenizerLanguageSerbianLatin, MicrosoftStemmingTokenizerLanguageSlovak, MicrosoftStemmingTokenizerLanguageSlovenian, MicrosoftStemmingTokenizerLanguageSpanish, MicrosoftStemmingTokenizerLanguageSwedish, MicrosoftStemmingTokenizerLanguageTamil, MicrosoftStemmingTokenizerLanguageTelugu, MicrosoftStemmingTokenizerLanguageTurkish, MicrosoftStemmingTokenizerLanguageUkrainian, MicrosoftStemmingTokenizerLanguageUrdu}
}

// MicrosoftTokenizerLanguage enumerates the values for microsoft tokenizer language.
type MicrosoftTokenizerLanguage string

const (
	// MicrosoftTokenizerLanguageBangla Selects the Microsoft tokenizer for Bangla.
	MicrosoftTokenizerLanguageBangla MicrosoftTokenizerLanguage = "bangla"
	// MicrosoftTokenizerLanguageBulgarian Selects the Microsoft tokenizer for Bulgarian.
	MicrosoftTokenizerLanguageBulgarian MicrosoftTokenizerLanguage = "bulgarian"
	// MicrosoftTokenizerLanguageCatalan Selects the Microsoft tokenizer for Catalan.
	MicrosoftTokenizerLanguageCatalan MicrosoftTokenizerLanguage = "catalan"
	// MicrosoftTokenizerLanguageChineseSimplified Selects the Microsoft tokenizer for Chinese (Simplified).
	MicrosoftTokenizerLanguageChineseSimplified MicrosoftTokenizerLanguage = "chineseSimplified"
	// MicrosoftTokenizerLanguageChineseTraditional Selects the Microsoft tokenizer for Chinese (Traditional).
	MicrosoftTokenizerLanguageChineseTraditional MicrosoftTokenizerLanguage = "chineseTraditional"
	// MicrosoftTokenizerLanguageCroatian Selects the Microsoft tokenizer for Croatian.
	MicrosoftTokenizerLanguageCroatian MicrosoftTokenizerLanguage = "croatian"
	// MicrosoftTokenizerLanguageCzech Selects the Microsoft tokenizer for Czech.
	MicrosoftTokenizerLanguageCzech MicrosoftTokenizerLanguage = "czech"
	// MicrosoftTokenizerLanguageDanish Selects the Microsoft tokenizer for Danish.
	MicrosoftTokenizerLanguageDanish MicrosoftTokenizerLanguage = "danish"
	// MicrosoftTokenizerLanguageDutch Selects the Microsoft tokenizer for Dutch.
	MicrosoftTokenizerLanguageDutch MicrosoftTokenizerLanguage = "dutch"
	// MicrosoftTokenizerLanguageEnglish Selects the Microsoft tokenizer for English.
	MicrosoftTokenizerLanguageEnglish MicrosoftTokenizerLanguage = "english"
	// MicrosoftTokenizerLanguageFrench Selects the Microsoft tokenizer for French.
	MicrosoftTokenizerLanguageFrench MicrosoftTokenizerLanguage = "french"
	// MicrosoftTokenizerLanguageGerman Selects the Microsoft tokenizer for German.
	MicrosoftTokenizerLanguageGerman MicrosoftTokenizerLanguage = "german"
	// MicrosoftTokenizerLanguageGreek Selects the Microsoft tokenizer for Greek.
	MicrosoftTokenizerLanguageGreek MicrosoftTokenizerLanguage = "greek"
	// MicrosoftTokenizerLanguageGujarati Selects the Microsoft tokenizer for Gujarati.
	MicrosoftTokenizerLanguageGujarati MicrosoftTokenizerLanguage = "gujarati"
	// MicrosoftTokenizerLanguageHindi Selects the Microsoft tokenizer for Hindi.
	MicrosoftTokenizerLanguageHindi MicrosoftTokenizerLanguage = "hindi"
	// MicrosoftTokenizerLanguageIcelandic Selects the Microsoft tokenizer for Icelandic.
	MicrosoftTokenizerLanguageIcelandic MicrosoftTokenizerLanguage = "icelandic"
	// MicrosoftTokenizerLanguageIndonesian Selects the Microsoft tokenizer for Indonesian.
	MicrosoftTokenizerLanguageIndonesian MicrosoftTokenizerLanguage = "indonesian"
	// MicrosoftTokenizerLanguageItalian Selects the Microsoft tokenizer for Italian.
	MicrosoftTokenizerLanguageItalian MicrosoftTokenizerLanguage = "italian"
	// MicrosoftTokenizerLanguageJapanese Selects the Microsoft tokenizer for Japanese.
	MicrosoftTokenizerLanguageJapanese MicrosoftTokenizerLanguage = "japanese"
	// MicrosoftTokenizerLanguageKannada Selects the Microsoft tokenizer for Kannada.
	MicrosoftTokenizerLanguageKannada MicrosoftTokenizerLanguage = "kannada"
	// MicrosoftTokenizerLanguageKorean Selects the Microsoft tokenizer for Korean.
	MicrosoftTokenizerLanguageKorean MicrosoftTokenizerLanguage = "korean"
	// MicrosoftTokenizerLanguageMalay Selects the Microsoft tokenizer for Malay.
	MicrosoftTokenizerLanguageMalay MicrosoftTokenizerLanguage = "malay"
	// MicrosoftTokenizerLanguageMalayalam Selects the Microsoft tokenizer for Malayalam.
	MicrosoftTokenizerLanguageMalayalam MicrosoftTokenizerLanguage = "malayalam"
	// MicrosoftTokenizerLanguageMarathi Selects the Microsoft tokenizer for Marathi.
	MicrosoftTokenizerLanguageMarathi MicrosoftTokenizerLanguage = "marathi"
	// MicrosoftTokenizerLanguageNorwegianBokmaal Selects the Microsoft tokenizer for Norwegian (Bokmål).
	MicrosoftTokenizerLanguageNorwegianBokmaal MicrosoftTokenizerLanguage = "norwegianBokmaal"
	// MicrosoftTokenizerLanguagePolish Selects the Microsoft tokenizer for Polish.
	MicrosoftTokenizerLanguagePolish MicrosoftTokenizerLanguage = "polish"
	// MicrosoftTokenizerLanguagePortuguese Selects the Microsoft tokenizer for Portuguese.
	MicrosoftTokenizerLanguagePortuguese MicrosoftTokenizerLanguage = "portuguese"
	// MicrosoftTokenizerLanguagePortugueseBrazilian Selects the Microsoft tokenizer for Portuguese (Brazil).
	MicrosoftTokenizerLanguagePortugueseBrazilian MicrosoftTokenizerLanguage = "portugueseBrazilian"
	// MicrosoftTokenizerLanguagePunjabi Selects the Microsoft tokenizer for Punjabi.
	MicrosoftTokenizerLanguagePunjabi MicrosoftTokenizerLanguage = "punjabi"
	// MicrosoftTokenizerLanguageRomanian Selects the Microsoft tokenizer for Romanian.
	MicrosoftTokenizerLanguageRomanian MicrosoftTokenizerLanguage = "romanian"
	// MicrosoftTokenizerLanguageRussian Selects the Microsoft tokenizer for Russian.
	MicrosoftTokenizerLanguageRussian MicrosoftTokenizerLanguage = "russian"
	// MicrosoftTokenizerLanguageSerbianCyrillic Selects the Microsoft tokenizer for Serbian (Cyrillic).
	MicrosoftTokenizerLanguageSerbianCyrillic MicrosoftTokenizerLanguage = "serbianCyrillic"
	// MicrosoftTokenizerLanguageSerbianLatin Selects the Microsoft tokenizer for Serbian (Latin).
	MicrosoftTokenizerLanguageSerbianLatin MicrosoftTokenizerLanguage = "serbianLatin"
	// MicrosoftTokenizerLanguageSlovenian Selects the Microsoft tokenizer for Slovenian.
	MicrosoftTokenizerLanguageSlovenian MicrosoftTokenizerLanguage = "slovenian"
	// MicrosoftTokenizerLanguageSpanish Selects the Microsoft tokenizer for Spanish.
	MicrosoftTokenizerLanguageSpanish MicrosoftTokenizerLanguage = "spanish"
	// MicrosoftTokenizerLanguageSwedish Selects the Microsoft tokenizer for Swedish.
	MicrosoftTokenizerLanguageSwedish MicrosoftTokenizerLanguage = "swedish"
	// MicrosoftTokenizerLanguageTamil Selects the Microsoft tokenizer for Tamil.
	MicrosoftTokenizerLanguageTamil MicrosoftTokenizerLanguage = "tamil"
	// MicrosoftTokenizerLanguageTelugu Selects the Microsoft tokenizer for Telugu.
	MicrosoftTokenizerLanguageTelugu MicrosoftTokenizerLanguage = "telugu"
	// MicrosoftTokenizerLanguageThai Selects the Microsoft tokenizer for Thai.
	MicrosoftTokenizerLanguageThai MicrosoftTokenizerLanguage = "thai"
	// MicrosoftTokenizerLanguageUkrainian Selects the Microsoft tokenizer for Ukrainian.
	MicrosoftTokenizerLanguageUkrainian MicrosoftTokenizerLanguage = "ukrainian"
	// MicrosoftTokenizerLanguageUrdu Selects the Microsoft tokenizer for Urdu.
	MicrosoftTokenizerLanguageUrdu MicrosoftTokenizerLanguage = "urdu"
	// MicrosoftTokenizerLanguageVietnamese Selects the Microsoft tokenizer for Vietnamese.
	MicrosoftTokenizerLanguageVietnamese MicrosoftTokenizerLanguage = "vietnamese"
)

// PossibleMicrosoftTokenizerLanguageValues returns an array of possible values for the MicrosoftTokenizerLanguage const type.
func PossibleMicrosoftTokenizerLanguageValues() []MicrosoftTokenizerLanguage {
	return []MicrosoftTokenizerLanguage{MicrosoftTokenizerLanguageBangla, MicrosoftTokenizerLanguageBulgarian, MicrosoftTokenizerLanguageCatalan, MicrosoftTokenizerLanguageChineseSimplified, MicrosoftTokenizerLanguageChineseTraditional, MicrosoftTokenizerLanguageCroatian, MicrosoftTokenizerLanguageCzech, MicrosoftTokenizerLanguageDanish, MicrosoftTokenizerLanguageDutch, MicrosoftTokenizerLanguageEnglish, MicrosoftTokenizerLanguageFrench, MicrosoftTokenizerLanguageGerman, MicrosoftTokenizerLanguageGreek, MicrosoftTokenizerLanguageGujarati, MicrosoftTokenizerLanguageHindi, MicrosoftTokenizerLanguageIcelandic, MicrosoftTokenizerLanguageIndonesian, MicrosoftTokenizerLanguageItalian, MicrosoftTokenizerLanguageJapanese, MicrosoftTokenizerLanguageKannada, MicrosoftTokenizerLanguageKorean, MicrosoftTokenizerLanguageMalay, MicrosoftTokenizerLanguageMalayalam, MicrosoftTokenizerLanguageMarathi, MicrosoftTokenizerLanguageNorwegianBokmaal, MicrosoftTokenizerLanguagePolish, MicrosoftTokenizerLanguagePortuguese, MicrosoftTokenizerLanguagePortugueseBrazilian, MicrosoftTokenizerLanguagePunjabi, MicrosoftTokenizerLanguageRomanian, MicrosoftTokenizerLanguageRussian, MicrosoftTokenizerLanguageSerbianCyrillic, MicrosoftTokenizerLanguageSerbianLatin, MicrosoftTokenizerLanguageSlovenian, MicrosoftTokenizerLanguageSpanish, MicrosoftTokenizerLanguageSwedish, MicrosoftTokenizerLanguageTamil, MicrosoftTokenizerLanguageTelugu, MicrosoftTokenizerLanguageThai, MicrosoftTokenizerLanguageUkrainian, MicrosoftTokenizerLanguageUrdu, MicrosoftTokenizerLanguageVietnamese}
}

// OcrSkillLanguage enumerates the values for ocr skill language.
type OcrSkillLanguage string

const (
	// OcrSkillLanguageAf Afrikaans
	OcrSkillLanguageAf OcrSkillLanguage = "af"
	// OcrSkillLanguageAnp Angika (Devanagiri)
	OcrSkillLanguageAnp OcrSkillLanguage = "anp"
	// OcrSkillLanguageAr Arabic
	OcrSkillLanguageAr OcrSkillLanguage = "ar"
	// OcrSkillLanguageAst Asturian
	OcrSkillLanguageAst OcrSkillLanguage = "ast"
	// OcrSkillLanguageAwa Awadhi-Hindi (Devanagiri)
	OcrSkillLanguageAwa OcrSkillLanguage = "awa"
	// OcrSkillLanguageAz Azerbaijani (Latin)
	OcrSkillLanguageAz OcrSkillLanguage = "az"
	// OcrSkillLanguageBe Belarusian (Cyrillic and Latin)
	OcrSkillLanguageBe OcrSkillLanguage = "be"
	// OcrSkillLanguageBeCyrl Belarusian (Cyrillic)
	OcrSkillLanguageBeCyrl OcrSkillLanguage = "be-cyrl"
	// OcrSkillLanguageBeLatn Belarusian (Latin)
	OcrSkillLanguageBeLatn OcrSkillLanguage = "be-latn"
	// OcrSkillLanguageBfy Bagheli
	OcrSkillLanguageBfy OcrSkillLanguage = "bfy"
	// OcrSkillLanguageBfz Mahasu Pahari (Devanagiri)
	OcrSkillLanguageBfz OcrSkillLanguage = "bfz"
	// OcrSkillLanguageBg Bulgarian
	OcrSkillLanguageBg OcrSkillLanguage = "bg"
	// OcrSkillLanguageBgc Haryanvi
	OcrSkillLanguageBgc OcrSkillLanguage = "bgc"
	// OcrSkillLanguageBho Bhojpuri-Hindi (Devanagiri)
	OcrSkillLanguageBho OcrSkillLanguage = "bho"
	// OcrSkillLanguageBi Bislama
	OcrSkillLanguageBi OcrSkillLanguage = "bi"
	// OcrSkillLanguageBns Bundeli
	OcrSkillLanguageBns OcrSkillLanguage = "bns"
	// OcrSkillLanguageBr Breton
	OcrSkillLanguageBr OcrSkillLanguage = "br"
	// OcrSkillLanguageBra Brajbha
	OcrSkillLanguageBra OcrSkillLanguage = "bra"
	// OcrSkillLanguageBrx Bodo (Devanagiri)
	OcrSkillLanguageBrx OcrSkillLanguage = "brx"
	// OcrSkillLanguageBs Bosnian Latin
	OcrSkillLanguageBs OcrSkillLanguage = "bs"
	// OcrSkillLanguageBua Buryat (Cyrillic)
	OcrSkillLanguageBua OcrSkillLanguage = "bua"
	// OcrSkillLanguageCa Catalan
	OcrSkillLanguageCa OcrSkillLanguage = "ca"
	// OcrSkillLanguageCeb Cebuano
	OcrSkillLanguageCeb OcrSkillLanguage = "ceb"
	// OcrSkillLanguageCh Chamorro
	OcrSkillLanguageCh OcrSkillLanguage = "ch"
	// OcrSkillLanguageCnrCyrl Montenegrin (Cyrillic)
	OcrSkillLanguageCnrCyrl OcrSkillLanguage = "cnr-cyrl"
	// OcrSkillLanguageCnrLatn Montenegrin (Latin)
	OcrSkillLanguageCnrLatn OcrSkillLanguage = "cnr-latn"
	// OcrSkillLanguageCo Corsican
	OcrSkillLanguageCo OcrSkillLanguage = "co"
	// OcrSkillLanguageCrh Crimean Tatar (Latin)
	OcrSkillLanguageCrh OcrSkillLanguage = "crh"
	// OcrSkillLanguageCs Czech
	OcrSkillLanguageCs OcrSkillLanguage = "cs"
	// OcrSkillLanguageCsb Kashubian
	OcrSkillLanguageCsb OcrSkillLanguage = "csb"
	// OcrSkillLanguageCy Welsh
	OcrSkillLanguageCy OcrSkillLanguage = "cy"
	// OcrSkillLanguageDa Danish
	OcrSkillLanguageDa OcrSkillLanguage = "da"
	// OcrSkillLanguageDe German
	OcrSkillLanguageDe OcrSkillLanguage = "de"
	// OcrSkillLanguageDhi Dhimal (Devanagiri)
	OcrSkillLanguageDhi OcrSkillLanguage = "dhi"
	// OcrSkillLanguageDoi Dogri (Devanagiri)
	OcrSkillLanguageDoi OcrSkillLanguage = "doi"
	// OcrSkillLanguageDsb Lower Sorbian
	OcrSkillLanguageDsb OcrSkillLanguage = "dsb"
	// OcrSkillLanguageEl Greek
	OcrSkillLanguageEl OcrSkillLanguage = "el"
	// OcrSkillLanguageEn English
	OcrSkillLanguageEn OcrSkillLanguage = "en"
	// OcrSkillLanguageEs Spanish
	OcrSkillLanguageEs OcrSkillLanguage = "es"
	// OcrSkillLanguageEt Estonian
	OcrSkillLanguageEt OcrSkillLanguage = "et"
	// OcrSkillLanguageEu Basque
	OcrSkillLanguageEu OcrSkillLanguage = "eu"
	// OcrSkillLanguageFa Persian
	OcrSkillLanguageFa OcrSkillLanguage = "fa"
	// OcrSkillLanguageFi Finnish
	OcrSkillLanguageFi OcrSkillLanguage = "fi"
	// OcrSkillLanguageFil Filipino
	OcrSkillLanguageFil OcrSkillLanguage = "fil"
	// OcrSkillLanguageFj Fijian
	OcrSkillLanguageFj OcrSkillLanguage = "fj"
	// OcrSkillLanguageFo Faroese
	OcrSkillLanguageFo OcrSkillLanguage = "fo"
	// OcrSkillLanguageFr French
	OcrSkillLanguageFr OcrSkillLanguage = "fr"
	// OcrSkillLanguageFur Frulian
	OcrSkillLanguageFur OcrSkillLanguage = "fur"
	// OcrSkillLanguageFy Western Frisian
	OcrSkillLanguageFy OcrSkillLanguage = "fy"
	// OcrSkillLanguageGa Irish
	OcrSkillLanguageGa OcrSkillLanguage = "ga"
	// OcrSkillLanguageGag Gagauz (Latin)
	OcrSkillLanguageGag OcrSkillLanguage = "gag"
	// OcrSkillLanguageGd Scottish Gaelic
	OcrSkillLanguageGd OcrSkillLanguage = "gd"
	// OcrSkillLanguageGil Gilbertese
	OcrSkillLanguageGil OcrSkillLanguage = "gil"
	// OcrSkillLanguageGl Galician
	OcrSkillLanguageGl OcrSkillLanguage = "gl"
	// OcrSkillLanguageGon Gondi (Devanagiri)
	OcrSkillLanguageGon OcrSkillLanguage = "gon"
	// OcrSkillLanguageGv Manx
	OcrSkillLanguageGv OcrSkillLanguage = "gv"
	// OcrSkillLanguageGvr Gurung (Devanagiri)
	OcrSkillLanguageGvr OcrSkillLanguage = "gvr"
	// OcrSkillLanguageHaw Hawaiian
	OcrSkillLanguageHaw OcrSkillLanguage = "haw"
	// OcrSkillLanguageHi Hindi
	OcrSkillLanguageHi OcrSkillLanguage = "hi"
	// OcrSkillLanguageHlb Halbi (Devanagiri)
	OcrSkillLanguageHlb OcrSkillLanguage = "hlb"
	// OcrSkillLanguageHne Chhattisgarhi (Devanagiri)
	OcrSkillLanguageHne OcrSkillLanguage = "hne"
	// OcrSkillLanguageHni Hani
	OcrSkillLanguageHni OcrSkillLanguage = "hni"
	// OcrSkillLanguageHoc Ho (Devanagiri)
	OcrSkillLanguageHoc OcrSkillLanguage = "hoc"
	// OcrSkillLanguageHr Croatian
	OcrSkillLanguageHr OcrSkillLanguage = "hr"
	// OcrSkillLanguageHsb Upper Sorbian
	OcrSkillLanguageHsb OcrSkillLanguage = "hsb"
	// OcrSkillLanguageHt Haitian Creole
	OcrSkillLanguageHt OcrSkillLanguage = "ht"
	// OcrSkillLanguageHu Hungarian
	OcrSkillLanguageHu OcrSkillLanguage = "hu"
	// OcrSkillLanguageID Indonesian
	OcrSkillLanguageID OcrSkillLanguage = "id"
	// OcrSkillLanguageIa Interlingua
	OcrSkillLanguageIa OcrSkillLanguage = "ia"
	// OcrSkillLanguageIs Icelandic
	OcrSkillLanguageIs OcrSkillLanguage = "is"
	// OcrSkillLanguageIt Italian
	OcrSkillLanguageIt OcrSkillLanguage = "it"
	// OcrSkillLanguageIu Inuktitut (Latin)
	OcrSkillLanguageIu OcrSkillLanguage = "iu"
	// OcrSkillLanguageJa Japanese
	OcrSkillLanguageJa OcrSkillLanguage = "ja"
	// OcrSkillLanguageJns Jaunsari (Devanagiri)
	OcrSkillLanguageJns OcrSkillLanguage = "Jns"
	// OcrSkillLanguageJv Javanese
	OcrSkillLanguageJv OcrSkillLanguage = "jv"
	// OcrSkillLanguageKaa Kara-Kalpak (Latin)
	OcrSkillLanguageKaa OcrSkillLanguage = "kaa"
	// OcrSkillLanguageKaaCyrl Kara-Kalpak (Cyrillic)
	OcrSkillLanguageKaaCyrl OcrSkillLanguage = "kaa-cyrl"
	// OcrSkillLanguageKac Kachin (Latin)
	OcrSkillLanguageKac OcrSkillLanguage = "kac"
	// OcrSkillLanguageKea Kabuverdianu
	OcrSkillLanguageKea OcrSkillLanguage = "kea"
	// OcrSkillLanguageKfq Korku
	OcrSkillLanguageKfq OcrSkillLanguage = "kfq"
	// OcrSkillLanguageKha Khasi
	OcrSkillLanguageKha OcrSkillLanguage = "kha"
	// OcrSkillLanguageKkCyrl Kazakh (Cyrillic)
	OcrSkillLanguageKkCyrl OcrSkillLanguage = "kk-cyrl"
	// OcrSkillLanguageKkLatn Kazakh (Latin)
	OcrSkillLanguageKkLatn OcrSkillLanguage = "kk-latn"
	// OcrSkillLanguageKl Greenlandic
	OcrSkillLanguageKl OcrSkillLanguage = "kl"
	// OcrSkillLanguageKlr Khaling
	OcrSkillLanguageKlr OcrSkillLanguage = "klr"
	// OcrSkillLanguageKmj Malto (Devanagiri)
	OcrSkillLanguageKmj OcrSkillLanguage = "kmj"
	// OcrSkillLanguageKo Korean
	OcrSkillLanguageKo OcrSkillLanguage = "ko"
	// OcrSkillLanguageKos Kosraean
	OcrSkillLanguageKos OcrSkillLanguage = "kos"
	// OcrSkillLanguageKpy Koryak
	OcrSkillLanguageKpy OcrSkillLanguage = "kpy"
	// OcrSkillLanguageKrc Karachay-Balkar
	OcrSkillLanguageKrc OcrSkillLanguage = "krc"
	// OcrSkillLanguageKru Kurukh (Devanagiri)
	OcrSkillLanguageKru OcrSkillLanguage = "kru"
	// OcrSkillLanguageKsh Ripuarian
	OcrSkillLanguageKsh OcrSkillLanguage = "ksh"
	// OcrSkillLanguageKuArab Kurdish (Arabic)
	OcrSkillLanguageKuArab OcrSkillLanguage = "ku-arab"
	// OcrSkillLanguageKuLatn Kurdish (Latin)
	OcrSkillLanguageKuLatn OcrSkillLanguage = "ku-latn"
	// OcrSkillLanguageKum Kumyk (Cyrillic)
	OcrSkillLanguageKum OcrSkillLanguage = "kum"
	// OcrSkillLanguageKw Cornish
	OcrSkillLanguageKw OcrSkillLanguage = "kw"
	// OcrSkillLanguageKy Kyrgyz (Cyrillic)
	OcrSkillLanguageKy OcrSkillLanguage = "ky"
	// OcrSkillLanguageLa Latin
	OcrSkillLanguageLa OcrSkillLanguage = "la"
	// OcrSkillLanguageLb Luxembourgish
	OcrSkillLanguageLb OcrSkillLanguage = "lb"
	// OcrSkillLanguageLkt Lakota
	OcrSkillLanguageLkt OcrSkillLanguage = "lkt"
	// OcrSkillLanguageLt Lithuanian
	OcrSkillLanguageLt OcrSkillLanguage = "lt"
	// OcrSkillLanguageMi Maori
	OcrSkillLanguageMi OcrSkillLanguage = "mi"
	// OcrSkillLanguageMn Mongolian (Cyrillic)
	OcrSkillLanguageMn OcrSkillLanguage = "mn"
	// OcrSkillLanguageMr Marathi
	OcrSkillLanguageMr OcrSkillLanguage = "mr"
	// OcrSkillLanguageMs Malay (Latin)
	OcrSkillLanguageMs OcrSkillLanguage = "ms"
	// OcrSkillLanguageMt Maltese
	OcrSkillLanguageMt OcrSkillLanguage = "mt"
	// OcrSkillLanguageMww Hmong Daw (Latin)
	OcrSkillLanguageMww OcrSkillLanguage = "mww"
	// OcrSkillLanguageMyv Erzya (Cyrillic)
	OcrSkillLanguageMyv OcrSkillLanguage = "myv"
	// OcrSkillLanguageNap Neapolitan
	OcrSkillLanguageNap OcrSkillLanguage = "nap"
	// OcrSkillLanguageNb Norwegian
	OcrSkillLanguageNb OcrSkillLanguage = "nb"
	// OcrSkillLanguageNe Nepali
	OcrSkillLanguageNe OcrSkillLanguage = "ne"
	// OcrSkillLanguageNiu Niuean
	OcrSkillLanguageNiu OcrSkillLanguage = "niu"
	// OcrSkillLanguageNl Dutch
	OcrSkillLanguageNl OcrSkillLanguage = "nl"
	// OcrSkillLanguageNo Norwegian
	OcrSkillLanguageNo OcrSkillLanguage = "no"
	// OcrSkillLanguageNog Nogay
	OcrSkillLanguageNog OcrSkillLanguage = "nog"
	// OcrSkillLanguageOc Occitan
	OcrSkillLanguageOc OcrSkillLanguage = "oc"
	// OcrSkillLanguageOs Ossetic
	OcrSkillLanguageOs OcrSkillLanguage = "os"
	// OcrSkillLanguagePa Punjabi (Arabic)
	OcrSkillLanguagePa OcrSkillLanguage = "pa"
	// OcrSkillLanguagePl Polish
	OcrSkillLanguagePl OcrSkillLanguage = "pl"
	// OcrSkillLanguagePrs Dari
	OcrSkillLanguagePrs OcrSkillLanguage = "prs"
	// OcrSkillLanguagePs Pashto
	OcrSkillLanguagePs OcrSkillLanguage = "ps"
	// OcrSkillLanguagePt Portuguese
	OcrSkillLanguagePt OcrSkillLanguage = "pt"
	// OcrSkillLanguageQuc K'iche'
	OcrSkillLanguageQuc OcrSkillLanguage = "quc"
	// OcrSkillLanguageRab Chamling
	OcrSkillLanguageRab OcrSkillLanguage = "rab"
	// OcrSkillLanguageRm Romansh
	OcrSkillLanguageRm OcrSkillLanguage = "rm"
	// OcrSkillLanguageRo Romanian
	OcrSkillLanguageRo OcrSkillLanguage = "ro"
	// OcrSkillLanguageRu Russian
	OcrSkillLanguageRu OcrSkillLanguage = "ru"
	// OcrSkillLanguageSa Sanskrit (Devanagiri)
	OcrSkillLanguageSa OcrSkillLanguage = "sa"
	// OcrSkillLanguageSat Santali (Devanagiri)
	OcrSkillLanguageSat OcrSkillLanguage = "sat"
	// OcrSkillLanguageSck Sadri (Devanagiri)
	OcrSkillLanguageSck OcrSkillLanguage = "sck"
	// OcrSkillLanguageSco Scots
	OcrSkillLanguageSco OcrSkillLanguage = "sco"
	// OcrSkillLanguageSk Slovak
	OcrSkillLanguageSk OcrSkillLanguage = "sk"
	// OcrSkillLanguageSl Slovenian
	OcrSkillLanguageSl OcrSkillLanguage = "sl"
	// OcrSkillLanguageSm Samoan (Latin)
	OcrSkillLanguageSm OcrSkillLanguage = "sm"
	// OcrSkillLanguageSma Southern Sami
	OcrSkillLanguageSma OcrSkillLanguage = "sma"
	// OcrSkillLanguageSme Northern Sami (Latin)
	OcrSkillLanguageSme OcrSkillLanguage = "sme"
	// OcrSkillLanguageSmj Lule Sami
	OcrSkillLanguageSmj OcrSkillLanguage = "smj"
	// OcrSkillLanguageSmn Inari Sami
	OcrSkillLanguageSmn OcrSkillLanguage = "smn"
	// OcrSkillLanguageSms Skolt Sami
	OcrSkillLanguageSms OcrSkillLanguage = "sms"
	// OcrSkillLanguageSo Somali (Arabic)
	OcrSkillLanguageSo OcrSkillLanguage = "so"
	// OcrSkillLanguageSq Albanian
	OcrSkillLanguageSq OcrSkillLanguage = "sq"
	// OcrSkillLanguageSr Serbian (Latin)
	OcrSkillLanguageSr OcrSkillLanguage = "sr"
	// OcrSkillLanguageSrCyrl Serbian (Cyrillic)
	OcrSkillLanguageSrCyrl OcrSkillLanguage = "sr-Cyrl"
	// OcrSkillLanguageSrLatn Serbian (Latin)
	OcrSkillLanguageSrLatn OcrSkillLanguage = "sr-Latn"
	// OcrSkillLanguageSrx Sirmauri (Devanagiri)
	OcrSkillLanguageSrx OcrSkillLanguage = "srx"
	// OcrSkillLanguageSv Swedish
	OcrSkillLanguageSv OcrSkillLanguage = "sv"
	// OcrSkillLanguageSw Swahili (Latin)
	OcrSkillLanguageSw OcrSkillLanguage = "sw"
	// OcrSkillLanguageTet Tetum
	OcrSkillLanguageTet OcrSkillLanguage = "tet"
	// OcrSkillLanguageTg Tajik (Cyrillic)
	OcrSkillLanguageTg OcrSkillLanguage = "tg"
	// OcrSkillLanguageThf Thangmi
	OcrSkillLanguageThf OcrSkillLanguage = "thf"
	// OcrSkillLanguageTk Turkmen (Latin)
	OcrSkillLanguageTk OcrSkillLanguage = "tk"
	// OcrSkillLanguageTo Tongan
	OcrSkillLanguageTo OcrSkillLanguage = "to"
	// OcrSkillLanguageTr Turkish
	OcrSkillLanguageTr OcrSkillLanguage = "tr"
	// OcrSkillLanguageTt Tatar (Latin)
	OcrSkillLanguageTt OcrSkillLanguage = "tt"
	// OcrSkillLanguageTyv Tuvan
	OcrSkillLanguageTyv OcrSkillLanguage = "tyv"
	// OcrSkillLanguageUg Uyghur (Arabic)
	OcrSkillLanguageUg OcrSkillLanguage = "ug"
	// OcrSkillLanguageUnk Unknown (All)
	OcrSkillLanguageUnk OcrSkillLanguage = "unk"
	// OcrSkillLanguageUr Urdu
	OcrSkillLanguageUr OcrSkillLanguage = "ur"
	// OcrSkillLanguageUz Uzbek (Latin)
	OcrSkillLanguageUz OcrSkillLanguage = "uz"
	// OcrSkillLanguageUzArab Uzbek (Arabic)
	OcrSkillLanguageUzArab OcrSkillLanguage = "uz-arab"
	// OcrSkillLanguageUzCyrl Uzbek (Cyrillic)
	OcrSkillLanguageUzCyrl OcrSkillLanguage = "uz-cyrl"
	// OcrSkillLanguageVo Volapük
	OcrSkillLanguageVo OcrSkillLanguage = "vo"
	// OcrSkillLanguageWae Walser
	OcrSkillLanguageWae OcrSkillLanguage = "wae"
	// OcrSkillLanguageXnr Kangri (Devanagiri)
	OcrSkillLanguageXnr OcrSkillLanguage = "xnr"
	// OcrSkillLanguageXsr Sherpa (Devanagiri)
	OcrSkillLanguageXsr OcrSkillLanguage = "xsr"
	// OcrSkillLanguageYua Yucatec Maya
	OcrSkillLanguageYua OcrSkillLanguage = "yua"
	// OcrSkillLanguageZa Zhuang
	OcrSkillLanguageZa OcrSkillLanguage = "za"
	// OcrSkillLanguageZhHans Chinese Simplified
	OcrSkillLanguageZhHans OcrSkillLanguage = "zh-Hans"
	// OcrSkillLanguageZhHant Chinese Traditional
	OcrSkillLanguageZhHant OcrSkillLanguage = "zh-Hant"
	// OcrSkillLanguageZu Zulu
	OcrSkillLanguageZu OcrSkillLanguage = "zu"
)

// PossibleOcrSkillLanguageValues returns an array of possible values for the OcrSkillLanguage const type.
func PossibleOcrSkillLanguageValues() []OcrSkillLanguage {
	return []OcrSkillLanguage{OcrSkillLanguageAf, OcrSkillLanguageAnp, OcrSkillLanguageAr, OcrSkillLanguageAst, OcrSkillLanguageAwa, OcrSkillLanguageAz, OcrSkillLanguageBe, OcrSkillLanguageBeCyrl, OcrSkillLanguageBeLatn, OcrSkillLanguageBfy, OcrSkillLanguageBfz, OcrSkillLanguageBg, OcrSkillLanguageBgc, OcrSkillLanguageBho, OcrSkillLanguageBi, OcrSkillLanguageBns, OcrSkillLanguageBr, OcrSkillLanguageBra, OcrSkillLanguageBrx, OcrSkillLanguageBs, OcrSkillLanguageBua, OcrSkillLanguageCa, OcrSkillLanguageCeb, OcrSkillLanguageCh, OcrSkillLanguageCnrCyrl, OcrSkillLanguageCnrLatn, OcrSkillLanguageCo, OcrSkillLanguageCrh, OcrSkillLanguageCs, OcrSkillLanguageCsb, OcrSkillLanguageCy, OcrSkillLanguageDa, OcrSkillLanguageDe, OcrSkillLanguageDhi, OcrSkillLanguageDoi, OcrSkillLanguageDsb, OcrSkillLanguageEl, OcrSkillLanguageEn, OcrSkillLanguageEs, OcrSkillLanguageEt, OcrSkillLanguageEu, OcrSkillLanguageFa, OcrSkillLanguageFi, OcrSkillLanguageFil, OcrSkillLanguageFj, OcrSkillLanguageFo, OcrSkillLanguageFr, OcrSkillLanguageFur, OcrSkillLanguageFy, OcrSkillLanguageGa, OcrSkillLanguageGag, OcrSkillLanguageGd, OcrSkillLanguageGil, OcrSkillLanguageGl, OcrSkillLanguageGon, OcrSkillLanguageGv, OcrSkillLanguageGvr, OcrSkillLanguageHaw, OcrSkillLanguageHi, OcrSkillLanguageHlb, OcrSkillLanguageHne, OcrSkillLanguageHni, OcrSkillLanguageHoc, OcrSkillLanguageHr, OcrSkillLanguageHsb, OcrSkillLanguageHt, OcrSkillLanguageHu, OcrSkillLanguageID, OcrSkillLanguageIa, OcrSkillLanguageIs, OcrSkillLanguageIt, OcrSkillLanguageIu, OcrSkillLanguageJa, OcrSkillLanguageJns, OcrSkillLanguageJv, OcrSkillLanguageKaa, OcrSkillLanguageKaaCyrl, OcrSkillLanguageKac, OcrSkillLanguageKea, OcrSkillLanguageKfq, OcrSkillLanguageKha, OcrSkillLanguageKkCyrl, OcrSkillLanguageKkLatn, OcrSkillLanguageKl, OcrSkillLanguageKlr, OcrSkillLanguageKmj, OcrSkillLanguageKo, OcrSkillLanguageKos, OcrSkillLanguageKpy, OcrSkillLanguageKrc, OcrSkillLanguageKru, OcrSkillLanguageKsh, OcrSkillLanguageKuArab, OcrSkillLanguageKuLatn, OcrSkillLanguageKum, OcrSkillLanguageKw, OcrSkillLanguageKy, OcrSkillLanguageLa, OcrSkillLanguageLb, OcrSkillLanguageLkt, OcrSkillLanguageLt, OcrSkillLanguageMi, OcrSkillLanguageMn, OcrSkillLanguageMr, OcrSkillLanguageMs, OcrSkillLanguageMt, OcrSkillLanguageMww, OcrSkillLanguageMyv, OcrSkillLanguageNap, OcrSkillLanguageNb, OcrSkillLanguageNe, OcrSkillLanguageNiu, OcrSkillLanguageNl, OcrSkillLanguageNo, OcrSkillLanguageNog, OcrSkillLanguageOc, OcrSkillLanguageOs, OcrSkillLanguagePa, OcrSkillLanguagePl, OcrSkillLanguagePrs, OcrSkillLanguagePs, OcrSkillLanguagePt, OcrSkillLanguageQuc, OcrSkillLanguageRab, OcrSkillLanguageRm, OcrSkillLanguageRo, OcrSkillLanguageRu, OcrSkillLanguageSa, OcrSkillLanguageSat, OcrSkillLanguageSck, OcrSkillLanguageSco, OcrSkillLanguageSk, OcrSkillLanguageSl, OcrSkillLanguageSm, OcrSkillLanguageSma, OcrSkillLanguageSme, OcrSkillLanguageSmj, OcrSkillLanguageSmn, OcrSkillLanguageSms, OcrSkillLanguageSo, OcrSkillLanguageSq, OcrSkillLanguageSr, OcrSkillLanguageSrCyrl, OcrSkillLanguageSrLatn, OcrSkillLanguageSrx, OcrSkillLanguageSv, OcrSkillLanguageSw, OcrSkillLanguageTet, OcrSkillLanguageTg, OcrSkillLanguageThf, OcrSkillLanguageTk, OcrSkillLanguageTo, OcrSkillLanguageTr, OcrSkillLanguageTt, OcrSkillLanguageTyv, OcrSkillLanguageUg, OcrSkillLanguageUnk, OcrSkillLanguageUr, OcrSkillLanguageUz, OcrSkillLanguageUzArab, OcrSkillLanguageUzCyrl, OcrSkillLanguageVo, OcrSkillLanguageWae, OcrSkillLanguageXnr, OcrSkillLanguageXsr, OcrSkillLanguageYua, OcrSkillLanguageZa, OcrSkillLanguageZhHans, OcrSkillLanguageZhHant, OcrSkillLanguageZu}
}

// OdataType enumerates the values for odata type.
type OdataType string

const (
	// OdataTypeLexicalAnalyzer ...
	OdataTypeLexicalAnalyzer OdataType = "LexicalAnalyzer"
	// OdataTypeMicrosoftAzureSearchCustomAnalyzer ...
	OdataTypeMicrosoftAzureSearchCustomAnalyzer OdataType = "#Microsoft.Azure.Search.CustomAnalyzer"
	// OdataTypeMicrosoftAzureSearchPatternAnalyzer ...
	OdataTypeMicrosoftAzureSearchPatternAnalyzer OdataType = "#Microsoft.Azure.Search.PatternAnalyzer"
	// OdataTypeMicrosoftAzureSearchStandardAnalyzer ...
	OdataTypeMicrosoftAzureSearchStandardAnalyzer OdataType = "#Microsoft.Azure.Search.StandardAnalyzer"
	// OdataTypeMicrosoftAzureSearchStopAnalyzer ...
	OdataTypeMicrosoftAzureSearchStopAnalyzer OdataType = "#Microsoft.Azure.Search.StopAnalyzer"
)

// PossibleOdataTypeValues returns an array of possible values for the OdataType const type.
func PossibleOdataTypeValues() []OdataType {
	return []OdataType{OdataTypeLexicalAnalyzer, OdataTypeMicrosoftAzureSearchCustomAnalyzer, OdataTypeMicrosoftAzureSearchPatternAnalyzer, OdataTypeMicrosoftAzureSearchStandardAnalyzer, OdataTypeMicrosoftAzureSearchStopAnalyzer}
}

// OdataTypeBasicCharFilter enumerates the values for odata type basic char filter.
type OdataTypeBasicCharFilter string

const (
	// OdataTypeBasicCharFilterOdataTypeCharFilter ...
	OdataTypeBasicCharFilterOdataTypeCharFilter OdataTypeBasicCharFilter = "CharFilter"
	// OdataTypeBasicCharFilterOdataTypeMicrosoftAzureSearchMappingCharFilter ...
	OdataTypeBasicCharFilterOdataTypeMicrosoftAzureSearchMappingCharFilter OdataTypeBasicCharFilter = "#Microsoft.Azure.Search.MappingCharFilter"
	// OdataTypeBasicCharFilterOdataTypeMicrosoftAzureSearchPatternReplaceCharFilter ...
	OdataTypeBasicCharFilterOdataTypeMicrosoftAzureSearchPatternReplaceCharFilter OdataTypeBasicCharFilter = "#Microsoft.Azure.Search.PatternReplaceCharFilter"
)

// PossibleOdataTypeBasicCharFilterValues returns an array of possible values for the OdataTypeBasicCharFilter const type.
func PossibleOdataTypeBasicCharFilterValues() []OdataTypeBasicCharFilter {
	return []OdataTypeBasicCharFilter{OdataTypeBasicCharFilterOdataTypeCharFilter, OdataTypeBasicCharFilterOdataTypeMicrosoftAzureSearchMappingCharFilter, OdataTypeBasicCharFilterOdataTypeMicrosoftAzureSearchPatternReplaceCharFilter}
}

// OdataTypeBasicCognitiveServicesAccount enumerates the values for odata type basic cognitive services
// account.
type OdataTypeBasicCognitiveServicesAccount string

const (
	// OdataTypeBasicCognitiveServicesAccountOdataTypeCognitiveServicesAccount ...
	OdataTypeBasicCognitiveServicesAccountOdataTypeCognitiveServicesAccount OdataTypeBasicCognitiveServicesAccount = "CognitiveServicesAccount"
	// OdataTypeBasicCognitiveServicesAccountOdataTypeMicrosoftAzureSearchCognitiveServicesByKey ...
	OdataTypeBasicCognitiveServicesAccountOdataTypeMicrosoftAzureSearchCognitiveServicesByKey OdataTypeBasicCognitiveServicesAccount = "#Microsoft.Azure.Search.CognitiveServicesByKey"
	// OdataTypeBasicCognitiveServicesAccountOdataTypeMicrosoftAzureSearchDefaultCognitiveServices ...
	OdataTypeBasicCognitiveServicesAccountOdataTypeMicrosoftAzureSearchDefaultCognitiveServices OdataTypeBasicCognitiveServicesAccount = "#Microsoft.Azure.Search.DefaultCognitiveServices"
)

// PossibleOdataTypeBasicCognitiveServicesAccountValues returns an array of possible values for the OdataTypeBasicCognitiveServicesAccount const type.
func PossibleOdataTypeBasicCognitiveServicesAccountValues() []OdataTypeBasicCognitiveServicesAccount {
	return []OdataTypeBasicCognitiveServicesAccount{OdataTypeBasicCognitiveServicesAccountOdataTypeCognitiveServicesAccount, OdataTypeBasicCognitiveServicesAccountOdataTypeMicrosoftAzureSearchCognitiveServicesByKey, OdataTypeBasicCognitiveServicesAccountOdataTypeMicrosoftAzureSearchDefaultCognitiveServices}
}

// OdataTypeBasicDataChangeDetectionPolicy enumerates the values for odata type basic data change detection
// policy.
type OdataTypeBasicDataChangeDetectionPolicy string

const (
	// OdataTypeBasicDataChangeDetectionPolicyOdataTypeDataChangeDetectionPolicy ...
	OdataTypeBasicDataChangeDetectionPolicyOdataTypeDataChangeDetectionPolicy OdataTypeBasicDataChangeDetectionPolicy = "DataChangeDetectionPolicy"
	// OdataTypeBasicDataChangeDetectionPolicyOdataTypeMicrosoftAzureSearchHighWaterMarkChangeDetectionPolicy ...
	OdataTypeBasicDataChangeDetectionPolicyOdataTypeMicrosoftAzureSearchHighWaterMarkChangeDetectionPolicy OdataTypeBasicDataChangeDetectionPolicy = "#Microsoft.Azure.Search.HighWaterMarkChangeDetectionPolicy"
	// OdataTypeBasicDataChangeDetectionPolicyOdataTypeMicrosoftAzureSearchSQLIntegratedChangeTrackingPolicy ...
	OdataTypeBasicDataChangeDetectionPolicyOdataTypeMicrosoftAzureSearchSQLIntegratedChangeTrackingPolicy OdataTypeBasicDataChangeDetectionPolicy = "#Microsoft.Azure.Search.SqlIntegratedChangeTrackingPolicy"
)

// PossibleOdataTypeBasicDataChangeDetectionPolicyValues returns an array of possible values for the OdataTypeBasicDataChangeDetectionPolicy const type.
func PossibleOdataTypeBasicDataChangeDetectionPolicyValues() []OdataTypeBasicDataChangeDetectionPolicy {
	return []OdataTypeBasicDataChangeDetectionPolicy{OdataTypeBasicDataChangeDetectionPolicyOdataTypeDataChangeDetectionPolicy, OdataTypeBasicDataChangeDetectionPolicyOdataTypeMicrosoftAzureSearchHighWaterMarkChangeDetectionPolicy, OdataTypeBasicDataChangeDetectionPolicyOdataTypeMicrosoftAzureSearchSQLIntegratedChangeTrackingPolicy}
}

// OdataTypeBasicDataDeletionDetectionPolicy enumerates the values for odata type basic data deletion detection
// policy.
type OdataTypeBasicDataDeletionDetectionPolicy string

const (
	// OdataTypeBasicDataDeletionDetectionPolicyOdataTypeDataDeletionDetectionPolicy ...
	OdataTypeBasicDataDeletionDetectionPolicyOdataTypeDataDeletionDetectionPolicy OdataTypeBasicDataDeletionDetectionPolicy = "DataDeletionDetectionPolicy"
	// OdataTypeBasicDataDeletionDetectionPolicyOdataTypeMicrosoftAzureSearchNativeBlobSoftDeleteDeletionDetectionPolicy ...
	OdataTypeBasicDataDeletionDetectionPolicyOdataTypeMicrosoftAzureSearchNativeBlobSoftDeleteDeletionDetectionPolicy OdataTypeBasicDataDeletionDetectionPolicy = "#Microsoft.Azure.Search.NativeBlobSoftDeleteDeletionDetectionPolicy"
	// OdataTypeBasicDataDeletionDetectionPolicyOdataTypeMicrosoftAzureSearchSoftDeleteColumnDeletionDetectionPolicy ...
	OdataTypeBasicDataDeletionDetectionPolicyOdataTypeMicrosoftAzureSearchSoftDeleteColumnDeletionDetectionPolicy OdataTypeBasicDataDeletionDetectionPolicy = "#Microsoft.Azure.Search.SoftDeleteColumnDeletionDetectionPolicy"
)

// PossibleOdataTypeBasicDataDeletionDetectionPolicyValues returns an array of possible values for the OdataTypeBasicDataDeletionDetectionPolicy const type.
func PossibleOdataTypeBasicDataDeletionDetectionPolicyValues() []OdataTypeBasicDataDeletionDetectionPolicy {
	return []OdataTypeBasicDataDeletionDetectionPolicy{OdataTypeBasicDataDeletionDetectionPolicyOdataTypeDataDeletionDetectionPolicy, OdataTypeBasicDataDeletionDetectionPolicyOdataTypeMicrosoftAzureSearchNativeBlobSoftDeleteDeletionDetectionPolicy, OdataTypeBasicDataDeletionDetectionPolicyOdataTypeMicrosoftAzureSearchSoftDeleteColumnDeletionDetectionPolicy}
}

// OdataTypeBasicIndexerDataIdentity enumerates the values for odata type basic indexer data identity.
type OdataTypeBasicIndexerDataIdentity string

const (
	// OdataTypeBasicIndexerDataIdentityOdataTypeMicrosoftAzureSearchDataNoneIdentity ...
	OdataTypeBasicIndexerDataIdentityOdataTypeMicrosoftAzureSearchDataNoneIdentity OdataTypeBasicIndexerDataIdentity = "#Microsoft.Azure.Search.DataNoneIdentity"
	// OdataTypeBasicIndexerDataIdentityOdataTypeMicrosoftAzureSearchDataUserAssignedIdentity ...
	OdataTypeBasicIndexerDataIdentityOdataTypeMicrosoftAzureSearchDataUserAssignedIdentity OdataTypeBasicIndexerDataIdentity = "#Microsoft.Azure.Search.DataUserAssignedIdentity"
	// OdataTypeBasicIndexerDataIdentityOdataTypeSearchIndexerDataIdentity ...
	OdataTypeBasicIndexerDataIdentityOdataTypeSearchIndexerDataIdentity OdataTypeBasicIndexerDataIdentity = "SearchIndexerDataIdentity"
)

// PossibleOdataTypeBasicIndexerDataIdentityValues returns an array of possible values for the OdataTypeBasicIndexerDataIdentity const type.
func PossibleOdataTypeBasicIndexerDataIdentityValues() []OdataTypeBasicIndexerDataIdentity {
	return []OdataTypeBasicIndexerDataIdentity{OdataTypeBasicIndexerDataIdentityOdataTypeMicrosoftAzureSearchDataNoneIdentity, OdataTypeBasicIndexerDataIdentityOdataTypeMicrosoftAzureSearchDataUserAssignedIdentity, OdataTypeBasicIndexerDataIdentityOdataTypeSearchIndexerDataIdentity}
}

// OdataTypeBasicIndexerSkill enumerates the values for odata type basic indexer skill.
type OdataTypeBasicIndexerSkill string

const (
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsCustomAmlSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsCustomAmlSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Custom.AmlSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsCustomWebAPISkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsCustomWebAPISkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Custom.WebApiSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextAzureOpenAIEmbeddingSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextAzureOpenAIEmbeddingSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Text.AzureOpenAIEmbeddingSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextCustomEntityLookupSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextCustomEntityLookupSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Text.CustomEntityLookupSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextEntityRecognitionSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextEntityRecognitionSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Text.EntityRecognitionSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextKeyPhraseExtractionSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextKeyPhraseExtractionSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Text.KeyPhraseExtractionSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextLanguageDetectionSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextLanguageDetectionSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Text.LanguageDetectionSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextMergeSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextMergeSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Text.MergeSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextPIIDetectionSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextPIIDetectionSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Text.PIIDetectionSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextSentimentSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextSentimentSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Text.SentimentSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextSplitSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextSplitSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Text.SplitSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextTranslationSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextTranslationSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Text.TranslationSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextV3EntityLinkingSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextV3EntityLinkingSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Text.V3.EntityLinkingSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextV3EntityRecognitionSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextV3EntityRecognitionSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Text.V3.EntityRecognitionSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextV3SentimentSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextV3SentimentSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Text.V3.SentimentSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsUtilConditionalSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsUtilConditionalSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Util.ConditionalSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsUtilDocumentExtractionSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsUtilDocumentExtractionSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Util.DocumentExtractionSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsUtilShaperSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsUtilShaperSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Util.ShaperSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsVisionImageAnalysisSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsVisionImageAnalysisSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Vision.ImageAnalysisSkill"
	// OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsVisionOcrSkill ...
	OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsVisionOcrSkill OdataTypeBasicIndexerSkill = "#Microsoft.Skills.Vision.OcrSkill"
	// OdataTypeBasicIndexerSkillOdataTypeSearchIndexerSkill ...
	OdataTypeBasicIndexerSkillOdataTypeSearchIndexerSkill OdataTypeBasicIndexerSkill = "SearchIndexerSkill"
)

// PossibleOdataTypeBasicIndexerSkillValues returns an array of possible values for the OdataTypeBasicIndexerSkill const type.
func PossibleOdataTypeBasicIndexerSkillValues() []OdataTypeBasicIndexerSkill {
	return []OdataTypeBasicIndexerSkill{OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsCustomAmlSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsCustomWebAPISkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextAzureOpenAIEmbeddingSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextCustomEntityLookupSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextEntityRecognitionSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextKeyPhraseExtractionSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextLanguageDetectionSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextMergeSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextPIIDetectionSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextSentimentSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextSplitSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextTranslationSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextV3EntityLinkingSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextV3EntityRecognitionSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsTextV3SentimentSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsUtilConditionalSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsUtilDocumentExtractionSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsUtilShaperSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsVisionImageAnalysisSkill, OdataTypeBasicIndexerSkillOdataTypeMicrosoftSkillsVisionOcrSkill, OdataTypeBasicIndexerSkillOdataTypeSearchIndexerSkill}
}

// OdataTypeBasicLexicalNormalizer enumerates the values for odata type basic lexical normalizer.
type OdataTypeBasicLexicalNormalizer string

const (
	// OdataTypeBasicLexicalNormalizerOdataTypeLexicalNormalizer ...
	OdataTypeBasicLexicalNormalizerOdataTypeLexicalNormalizer OdataTypeBasicLexicalNormalizer = "LexicalNormalizer"
	// OdataTypeBasicLexicalNormalizerOdataTypeMicrosoftAzureSearchCustomNormalizer ...
	OdataTypeBasicLexicalNormalizerOdataTypeMicrosoftAzureSearchCustomNormalizer OdataTypeBasicLexicalNormalizer = "#Microsoft.Azure.Search.CustomNormalizer"
)

// PossibleOdataTypeBasicLexicalNormalizerValues returns an array of possible values for the OdataTypeBasicLexicalNormalizer const type.
func PossibleOdataTypeBasicLexicalNormalizerValues() []OdataTypeBasicLexicalNormalizer {
	return []OdataTypeBasicLexicalNormalizer{OdataTypeBasicLexicalNormalizerOdataTypeLexicalNormalizer, OdataTypeBasicLexicalNormalizerOdataTypeMicrosoftAzureSearchCustomNormalizer}
}

// OdataTypeBasicLexicalTokenizer enumerates the values for odata type basic lexical tokenizer.
type OdataTypeBasicLexicalTokenizer string

const (
	// OdataTypeBasicLexicalTokenizerOdataTypeLexicalTokenizer ...
	OdataTypeBasicLexicalTokenizerOdataTypeLexicalTokenizer OdataTypeBasicLexicalTokenizer = "LexicalTokenizer"
	// OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchClassicTokenizer ...
	OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchClassicTokenizer OdataTypeBasicLexicalTokenizer = "#Microsoft.Azure.Search.ClassicTokenizer"
	// OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchEdgeNGramTokenizer ...
	OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchEdgeNGramTokenizer OdataTypeBasicLexicalTokenizer = "#Microsoft.Azure.Search.EdgeNGramTokenizer"
	// OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchKeywordTokenizer ...
	OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchKeywordTokenizer OdataTypeBasicLexicalTokenizer = "#Microsoft.Azure.Search.KeywordTokenizer"
	// OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchKeywordTokenizerV2 ...
	OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchKeywordTokenizerV2 OdataTypeBasicLexicalTokenizer = "#Microsoft.Azure.Search.KeywordTokenizerV2"
	// OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchMicrosoftLanguageStemmingTokenizer ...
	OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchMicrosoftLanguageStemmingTokenizer OdataTypeBasicLexicalTokenizer = "#Microsoft.Azure.Search.MicrosoftLanguageStemmingTokenizer"
	// OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchMicrosoftLanguageTokenizer ...
	OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchMicrosoftLanguageTokenizer OdataTypeBasicLexicalTokenizer = "#Microsoft.Azure.Search.MicrosoftLanguageTokenizer"
	// OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchNGramTokenizer ...
	OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchNGramTokenizer OdataTypeBasicLexicalTokenizer = "#Microsoft.Azure.Search.NGramTokenizer"
	// OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchPathHierarchyTokenizerV2 ...
	OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchPathHierarchyTokenizerV2 OdataTypeBasicLexicalTokenizer = "#Microsoft.Azure.Search.PathHierarchyTokenizerV2"
	// OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchPatternTokenizer ...
	OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchPatternTokenizer OdataTypeBasicLexicalTokenizer = "#Microsoft.Azure.Search.PatternTokenizer"
	// OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchStandardTokenizer ...
	OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchStandardTokenizer OdataTypeBasicLexicalTokenizer = "#Microsoft.Azure.Search.StandardTokenizer"
	// OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchStandardTokenizerV2 ...
	OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchStandardTokenizerV2 OdataTypeBasicLexicalTokenizer = "#Microsoft.Azure.Search.StandardTokenizerV2"
	// OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchUaxURLEmailTokenizer ...
	OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchUaxURLEmailTokenizer OdataTypeBasicLexicalTokenizer = "#Microsoft.Azure.Search.UaxUrlEmailTokenizer"
)

// PossibleOdataTypeBasicLexicalTokenizerValues returns an array of possible values for the OdataTypeBasicLexicalTokenizer const type.
func PossibleOdataTypeBasicLexicalTokenizerValues() []OdataTypeBasicLexicalTokenizer {
	return []OdataTypeBasicLexicalTokenizer{OdataTypeBasicLexicalTokenizerOdataTypeLexicalTokenizer, OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchClassicTokenizer, OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchEdgeNGramTokenizer, OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchKeywordTokenizer, OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchKeywordTokenizerV2, OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchMicrosoftLanguageStemmingTokenizer, OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchMicrosoftLanguageTokenizer, OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchNGramTokenizer, OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchPathHierarchyTokenizerV2, OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchPatternTokenizer, OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchStandardTokenizer, OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchStandardTokenizerV2, OdataTypeBasicLexicalTokenizerOdataTypeMicrosoftAzureSearchUaxURLEmailTokenizer}
}

// OdataTypeBasicSimilarity enumerates the values for odata type basic similarity.
type OdataTypeBasicSimilarity string

const (
	// OdataTypeBasicSimilarityOdataTypeMicrosoftAzureSearchBM25Similarity ...
	OdataTypeBasicSimilarityOdataTypeMicrosoftAzureSearchBM25Similarity OdataTypeBasicSimilarity = "#Microsoft.Azure.Search.BM25Similarity"
	// OdataTypeBasicSimilarityOdataTypeMicrosoftAzureSearchClassicSimilarity ...
	OdataTypeBasicSimilarityOdataTypeMicrosoftAzureSearchClassicSimilarity OdataTypeBasicSimilarity = "#Microsoft.Azure.Search.ClassicSimilarity"
	// OdataTypeBasicSimilarityOdataTypeSimilarity ...
	OdataTypeBasicSimilarityOdataTypeSimilarity OdataTypeBasicSimilarity = "Similarity"
)

// PossibleOdataTypeBasicSimilarityValues returns an array of possible values for the OdataTypeBasicSimilarity const type.
func PossibleOdataTypeBasicSimilarityValues() []OdataTypeBasicSimilarity {
	return []OdataTypeBasicSimilarity{OdataTypeBasicSimilarityOdataTypeMicrosoftAzureSearchBM25Similarity, OdataTypeBasicSimilarityOdataTypeMicrosoftAzureSearchClassicSimilarity, OdataTypeBasicSimilarityOdataTypeSimilarity}
}

// OdataTypeBasicTokenFilter enumerates the values for odata type basic token filter.
type OdataTypeBasicTokenFilter string

const (
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchASCIIFoldingTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchASCIIFoldingTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.AsciiFoldingTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchCjkBigramTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchCjkBigramTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.CjkBigramTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchCommonGramTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchCommonGramTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.CommonGramTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchDictionaryDecompounderTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchDictionaryDecompounderTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.DictionaryDecompounderTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchEdgeNGramTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchEdgeNGramTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.EdgeNGramTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchEdgeNGramTokenFilterV2 ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchEdgeNGramTokenFilterV2 OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.EdgeNGramTokenFilterV2"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchElisionTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchElisionTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.ElisionTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchKeepTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchKeepTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.KeepTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchKeywordMarkerTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchKeywordMarkerTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.KeywordMarkerTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchLengthTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchLengthTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.LengthTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchLimitTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchLimitTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.LimitTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchNGramTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchNGramTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.NGramTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchNGramTokenFilterV2 ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchNGramTokenFilterV2 OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.NGramTokenFilterV2"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchPatternCaptureTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchPatternCaptureTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.PatternCaptureTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchPatternReplaceTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchPatternReplaceTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.PatternReplaceTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchPhoneticTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchPhoneticTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.PhoneticTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchShingleTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchShingleTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.ShingleTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchSnowballTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchSnowballTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.SnowballTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchStemmerOverrideTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchStemmerOverrideTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.StemmerOverrideTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchStemmerTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchStemmerTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.StemmerTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchStopwordsTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchStopwordsTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.StopwordsTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchSynonymTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchSynonymTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.SynonymTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchTruncateTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchTruncateTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.TruncateTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchUniqueTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchUniqueTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.UniqueTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchWordDelimiterTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchWordDelimiterTokenFilter OdataTypeBasicTokenFilter = "#Microsoft.Azure.Search.WordDelimiterTokenFilter"
	// OdataTypeBasicTokenFilterOdataTypeTokenFilter ...
	OdataTypeBasicTokenFilterOdataTypeTokenFilter OdataTypeBasicTokenFilter = "TokenFilter"
)

// PossibleOdataTypeBasicTokenFilterValues returns an array of possible values for the OdataTypeBasicTokenFilter const type.
func PossibleOdataTypeBasicTokenFilterValues() []OdataTypeBasicTokenFilter {
	return []OdataTypeBasicTokenFilter{OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchASCIIFoldingTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchCjkBigramTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchCommonGramTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchDictionaryDecompounderTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchEdgeNGramTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchEdgeNGramTokenFilterV2, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchElisionTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchKeepTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchKeywordMarkerTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchLengthTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchLimitTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchNGramTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchNGramTokenFilterV2, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchPatternCaptureTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchPatternReplaceTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchPhoneticTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchShingleTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchSnowballTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchStemmerOverrideTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchStemmerTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchStopwordsTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchSynonymTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchTruncateTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchUniqueTokenFilter, OdataTypeBasicTokenFilterOdataTypeMicrosoftAzureSearchWordDelimiterTokenFilter, OdataTypeBasicTokenFilterOdataTypeTokenFilter}
}

// PIIDetectionSkillMaskingMode enumerates the values for pii detection skill masking mode.
type PIIDetectionSkillMaskingMode string

const (
	// PIIDetectionSkillMaskingModeNone No masking occurs and the maskedText output will not be returned.
	PIIDetectionSkillMaskingModeNone PIIDetectionSkillMaskingMode = "none"
	// PIIDetectionSkillMaskingModeReplace Replaces the detected entities with the character given in the
	// maskingCharacter parameter. The character will be repeated to the length of the detected entity so that
	// the offsets will correctly correspond to both the input text as well as the output maskedText.
	PIIDetectionSkillMaskingModeReplace PIIDetectionSkillMaskingMode = "replace"
)

// PossiblePIIDetectionSkillMaskingModeValues returns an array of possible values for the PIIDetectionSkillMaskingMode const type.
func PossiblePIIDetectionSkillMaskingModeValues() []PIIDetectionSkillMaskingMode {
	return []PIIDetectionSkillMaskingMode{PIIDetectionSkillMaskingModeNone, PIIDetectionSkillMaskingModeReplace}
}

// PhoneticEncoder enumerates the values for phonetic encoder.
type PhoneticEncoder string

const (
	// PhoneticEncoderBeiderMorse Encodes a token into a Beider-Morse value.
	PhoneticEncoderBeiderMorse PhoneticEncoder = "beiderMorse"
	// PhoneticEncoderCaverphone1 Encodes a token into a Caverphone 1.0 value.
	PhoneticEncoderCaverphone1 PhoneticEncoder = "caverphone1"
	// PhoneticEncoderCaverphone2 Encodes a token into a Caverphone 2.0 value.
	PhoneticEncoderCaverphone2 PhoneticEncoder = "caverphone2"
	// PhoneticEncoderCologne Encodes a token into a Cologne Phonetic value.
	PhoneticEncoderCologne PhoneticEncoder = "cologne"
	// PhoneticEncoderDoubleMetaphone Encodes a token into a double metaphone value.
	PhoneticEncoderDoubleMetaphone PhoneticEncoder = "doubleMetaphone"
	// PhoneticEncoderHaasePhonetik Encodes a token using the Haase refinement of the Kölner Phonetik
	// algorithm.
	PhoneticEncoderHaasePhonetik PhoneticEncoder = "haasePhonetik"
	// PhoneticEncoderKoelnerPhonetik Encodes a token using the Kölner Phonetik algorithm.
	PhoneticEncoderKoelnerPhonetik PhoneticEncoder = "koelnerPhonetik"
	// PhoneticEncoderMetaphone Encodes a token into a Metaphone value.
	PhoneticEncoderMetaphone PhoneticEncoder = "metaphone"
	// PhoneticEncoderNysiis Encodes a token into a NYSIIS value.
	PhoneticEncoderNysiis PhoneticEncoder = "nysiis"
	// PhoneticEncoderRefinedSoundex Encodes a token into a Refined Soundex value.
	PhoneticEncoderRefinedSoundex PhoneticEncoder = "refinedSoundex"
	// PhoneticEncoderSoundex Encodes a token into a Soundex value.
	PhoneticEncoderSoundex PhoneticEncoder = "soundex"
)

// PossiblePhoneticEncoderValues returns an array of possible values for the PhoneticEncoder const type.
func PossiblePhoneticEncoderValues() []PhoneticEncoder {
	return []PhoneticEncoder{PhoneticEncoderBeiderMorse, PhoneticEncoderCaverphone1, PhoneticEncoderCaverphone2, PhoneticEncoderCologne, PhoneticEncoderDoubleMetaphone, PhoneticEncoderHaasePhonetik, PhoneticEncoderKoelnerPhonetik, PhoneticEncoderMetaphone, PhoneticEncoderNysiis, PhoneticEncoderRefinedSoundex, PhoneticEncoderSoundex}
}

// RegexFlags enumerates the values for regex flags.
type RegexFlags string

const (
	// RegexFlagsCanonEq Enables canonical equivalence.
	RegexFlagsCanonEq RegexFlags = "CANON_EQ"
	// RegexFlagsCaseInsensitive Enables case-insensitive matching.
	RegexFlagsCaseInsensitive RegexFlags = "CASE_INSENSITIVE"
	// RegexFlagsComments Permits whitespace and comments in the pattern.
	RegexFlagsComments RegexFlags = "COMMENTS"
	// RegexFlagsDotAll Enables dotall mode.
	RegexFlagsDotAll RegexFlags = "DOTALL"
	// RegexFlagsLiteral Enables literal parsing of the pattern.
	RegexFlagsLiteral RegexFlags = "LITERAL"
	// RegexFlagsMultiline Enables multiline mode.
	RegexFlagsMultiline RegexFlags = "MULTILINE"
	// RegexFlagsUnicodeCase Enables Unicode-aware case folding.
	RegexFlagsUnicodeCase RegexFlags = "UNICODE_CASE"
	// RegexFlagsUnixLines Enables Unix lines mode.
	RegexFlagsUnixLines RegexFlags = "UNIX_LINES"
)

// PossibleRegexFlagsValues returns an array of possible values for the RegexFlags const type.
func PossibleRegexFlagsValues() []RegexFlags {
	return []RegexFlags{RegexFlagsCanonEq, RegexFlagsCaseInsensitive, RegexFlagsComments, RegexFlagsDotAll, RegexFlagsLiteral, RegexFlagsMultiline, RegexFlagsUnicodeCase, RegexFlagsUnixLines}
}

// ScoringFunctionAggregation enumerates the values for scoring function aggregation.
type ScoringFunctionAggregation string

const (
	// ScoringFunctionAggregationAverage Boost scores by the average of all scoring function results.
	ScoringFunctionAggregationAverage ScoringFunctionAggregation = "average"
	// ScoringFunctionAggregationFirstMatching Boost scores using the first applicable scoring function in the
	// scoring profile.
	ScoringFunctionAggregationFirstMatching ScoringFunctionAggregation = "firstMatching"
	// ScoringFunctionAggregationMaximum Boost scores by the maximum of all scoring function results.
	ScoringFunctionAggregationMaximum ScoringFunctionAggregation = "maximum"
	// ScoringFunctionAggregationMinimum Boost scores by the minimum of all scoring function results.
	ScoringFunctionAggregationMinimum ScoringFunctionAggregation = "minimum"
	// ScoringFunctionAggregationSum Boost scores by the sum of all scoring function results.
	ScoringFunctionAggregationSum ScoringFunctionAggregation = "sum"
)

// PossibleScoringFunctionAggregationValues returns an array of possible values for the ScoringFunctionAggregation const type.
func PossibleScoringFunctionAggregationValues() []ScoringFunctionAggregation {
	return []ScoringFunctionAggregation{ScoringFunctionAggregationAverage, ScoringFunctionAggregationFirstMatching, ScoringFunctionAggregationMaximum, ScoringFunctionAggregationMinimum, ScoringFunctionAggregationSum}
}

// ScoringFunctionInterpolation enumerates the values for scoring function interpolation.
type ScoringFunctionInterpolation string

const (
	// ScoringFunctionInterpolationConstant Boosts scores by a constant factor.
	ScoringFunctionInterpolationConstant ScoringFunctionInterpolation = "constant"
	// ScoringFunctionInterpolationLinear Boosts scores by a linearly decreasing amount. This is the default
	// interpolation for scoring functions.
	ScoringFunctionInterpolationLinear ScoringFunctionInterpolation = "linear"
	// ScoringFunctionInterpolationLogarithmic Boosts scores by an amount that decreases logarithmically.
	// Boosts decrease quickly for higher scores, and more slowly as the scores decrease. This interpolation
	// option is not allowed in tag scoring functions.
	ScoringFunctionInterpolationLogarithmic ScoringFunctionInterpolation = "logarithmic"
	// ScoringFunctionInterpolationQuadratic Boosts scores by an amount that decreases quadratically. Boosts
	// decrease slowly for higher scores, and more quickly as the scores decrease. This interpolation option is
	// not allowed in tag scoring functions.
	ScoringFunctionInterpolationQuadratic ScoringFunctionInterpolation = "quadratic"
)

// PossibleScoringFunctionInterpolationValues returns an array of possible values for the ScoringFunctionInterpolation const type.
func PossibleScoringFunctionInterpolationValues() []ScoringFunctionInterpolation {
	return []ScoringFunctionInterpolation{ScoringFunctionInterpolationConstant, ScoringFunctionInterpolationLinear, ScoringFunctionInterpolationLogarithmic, ScoringFunctionInterpolationQuadratic}
}

// SentimentSkillLanguage enumerates the values for sentiment skill language.
type SentimentSkillLanguage string

const (
	// SentimentSkillLanguageDa Danish
	SentimentSkillLanguageDa SentimentSkillLanguage = "da"
	// SentimentSkillLanguageDe German
	SentimentSkillLanguageDe SentimentSkillLanguage = "de"
	// SentimentSkillLanguageEl Greek
	SentimentSkillLanguageEl SentimentSkillLanguage = "el"
	// SentimentSkillLanguageEn English
	SentimentSkillLanguageEn SentimentSkillLanguage = "en"
	// SentimentSkillLanguageEs Spanish
	SentimentSkillLanguageEs SentimentSkillLanguage = "es"
	// SentimentSkillLanguageFi Finnish
	SentimentSkillLanguageFi SentimentSkillLanguage = "fi"
	// SentimentSkillLanguageFr French
	SentimentSkillLanguageFr SentimentSkillLanguage = "fr"
	// SentimentSkillLanguageIt Italian
	SentimentSkillLanguageIt SentimentSkillLanguage = "it"
	// SentimentSkillLanguageNl Dutch
	SentimentSkillLanguageNl SentimentSkillLanguage = "nl"
	// SentimentSkillLanguageNo Norwegian (Bokmaal)
	SentimentSkillLanguageNo SentimentSkillLanguage = "no"
	// SentimentSkillLanguagePl Polish
	SentimentSkillLanguagePl SentimentSkillLanguage = "pl"
	// SentimentSkillLanguagePtPT Portuguese (Portugal)
	SentimentSkillLanguagePtPT SentimentSkillLanguage = "pt-PT"
	// SentimentSkillLanguageRu Russian
	SentimentSkillLanguageRu SentimentSkillLanguage = "ru"
	// SentimentSkillLanguageSv Swedish
	SentimentSkillLanguageSv SentimentSkillLanguage = "sv"
	// SentimentSkillLanguageTr Turkish
	SentimentSkillLanguageTr SentimentSkillLanguage = "tr"
)

// PossibleSentimentSkillLanguageValues returns an array of possible values for the SentimentSkillLanguage const type.
func PossibleSentimentSkillLanguageValues() []SentimentSkillLanguage {
	return []SentimentSkillLanguage{SentimentSkillLanguageDa, SentimentSkillLanguageDe, SentimentSkillLanguageEl, SentimentSkillLanguageEn, SentimentSkillLanguageEs, SentimentSkillLanguageFi, SentimentSkillLanguageFr, SentimentSkillLanguageIt, SentimentSkillLanguageNl, SentimentSkillLanguageNo, SentimentSkillLanguagePl, SentimentSkillLanguagePtPT, SentimentSkillLanguageRu, SentimentSkillLanguageSv, SentimentSkillLanguageTr}
}

// SnowballTokenFilterLanguage enumerates the values for snowball token filter language.
type SnowballTokenFilterLanguage string

const (
	// SnowballTokenFilterLanguageArmenian Selects the Lucene Snowball stemming tokenizer for Armenian.
	SnowballTokenFilterLanguageArmenian SnowballTokenFilterLanguage = "armenian"
	// SnowballTokenFilterLanguageBasque Selects the Lucene Snowball stemming tokenizer for Basque.
	SnowballTokenFilterLanguageBasque SnowballTokenFilterLanguage = "basque"
	// SnowballTokenFilterLanguageCatalan Selects the Lucene Snowball stemming tokenizer for Catalan.
	SnowballTokenFilterLanguageCatalan SnowballTokenFilterLanguage = "catalan"
	// SnowballTokenFilterLanguageDanish Selects the Lucene Snowball stemming tokenizer for Danish.
	SnowballTokenFilterLanguageDanish SnowballTokenFilterLanguage = "danish"
	// SnowballTokenFilterLanguageDutch Selects the Lucene Snowball stemming tokenizer for Dutch.
	SnowballTokenFilterLanguageDutch SnowballTokenFilterLanguage = "dutch"
	// SnowballTokenFilterLanguageEnglish Selects the Lucene Snowball stemming tokenizer for English.
	SnowballTokenFilterLanguageEnglish SnowballTokenFilterLanguage = "english"
	// SnowballTokenFilterLanguageFinnish Selects the Lucene Snowball stemming tokenizer for Finnish.
	SnowballTokenFilterLanguageFinnish SnowballTokenFilterLanguage = "finnish"
	// SnowballTokenFilterLanguageFrench Selects the Lucene Snowball stemming tokenizer for French.
	SnowballTokenFilterLanguageFrench SnowballTokenFilterLanguage = "french"
	// SnowballTokenFilterLanguageGerman Selects the Lucene Snowball stemming tokenizer for German.
	SnowballTokenFilterLanguageGerman SnowballTokenFilterLanguage = "german"
	// SnowballTokenFilterLanguageGerman2 Selects the Lucene Snowball stemming tokenizer that uses the German
	// variant algorithm.
	SnowballTokenFilterLanguageGerman2 SnowballTokenFilterLanguage = "german2"
	// SnowballTokenFilterLanguageHungarian Selects the Lucene Snowball stemming tokenizer for Hungarian.
	SnowballTokenFilterLanguageHungarian SnowballTokenFilterLanguage = "hungarian"
	// SnowballTokenFilterLanguageItalian Selects the Lucene Snowball stemming tokenizer for Italian.
	SnowballTokenFilterLanguageItalian SnowballTokenFilterLanguage = "italian"
	// SnowballTokenFilterLanguageKp Selects the Lucene Snowball stemming tokenizer for Dutch that uses the
	// Kraaij-Pohlmann stemming algorithm.
	SnowballTokenFilterLanguageKp SnowballTokenFilterLanguage = "kp"
	// SnowballTokenFilterLanguageLovins Selects the Lucene Snowball stemming tokenizer for English that uses
	// the Lovins stemming algorithm.
	SnowballTokenFilterLanguageLovins SnowballTokenFilterLanguage = "lovins"
	// SnowballTokenFilterLanguageNorwegian Selects the Lucene Snowball stemming tokenizer for Norwegian.
	SnowballTokenFilterLanguageNorwegian SnowballTokenFilterLanguage = "norwegian"
	// SnowballTokenFilterLanguagePorter Selects the Lucene Snowball stemming tokenizer for English that uses
	// the Porter stemming algorithm.
	SnowballTokenFilterLanguagePorter SnowballTokenFilterLanguage = "porter"
	// SnowballTokenFilterLanguagePortuguese Selects the Lucene Snowball stemming tokenizer for Portuguese.
	SnowballTokenFilterLanguagePortuguese SnowballTokenFilterLanguage = "portuguese"
	// SnowballTokenFilterLanguageRomanian Selects the Lucene Snowball stemming tokenizer for Romanian.
	SnowballTokenFilterLanguageRomanian SnowballTokenFilterLanguage = "romanian"
	// SnowballTokenFilterLanguageRussian Selects the Lucene Snowball stemming tokenizer for Russian.
	SnowballTokenFilterLanguageRussian SnowballTokenFilterLanguage = "russian"
	// SnowballTokenFilterLanguageSpanish Selects the Lucene Snowball stemming tokenizer for Spanish.
	SnowballTokenFilterLanguageSpanish SnowballTokenFilterLanguage = "spanish"
	// SnowballTokenFilterLanguageSwedish Selects the Lucene Snowball stemming tokenizer for Swedish.
	SnowballTokenFilterLanguageSwedish SnowballTokenFilterLanguage = "swedish"
	// SnowballTokenFilterLanguageTurkish Selects the Lucene Snowball stemming tokenizer for Turkish.
	SnowballTokenFilterLanguageTurkish SnowballTokenFilterLanguage = "turkish"
)

// PossibleSnowballTokenFilterLanguageValues returns an array of possible values for the SnowballTokenFilterLanguage const type.
func PossibleSnowballTokenFilterLanguageValues() []SnowballTokenFilterLanguage {
	return []SnowballTokenFilterLanguage{SnowballTokenFilterLanguageArmenian, SnowballTokenFilterLanguageBasque, SnowballTokenFilterLanguageCatalan, SnowballTokenFilterLanguageDanish, SnowballTokenFilterLanguageDutch, SnowballTokenFilterLanguageEnglish, SnowballTokenFilterLanguageFinnish, SnowballTokenFilterLanguageFrench, SnowballTokenFilterLanguageGerman, SnowballTokenFilterLanguageGerman2, SnowballTokenFilterLanguageHungarian, SnowballTokenFilterLanguageItalian, SnowballTokenFilterLanguageKp, SnowballTokenFilterLanguageLovins, SnowballTokenFilterLanguageNorwegian, SnowballTokenFilterLanguagePorter, SnowballTokenFilterLanguagePortuguese, SnowballTokenFilterLanguageRomanian, SnowballTokenFilterLanguageRussian, SnowballTokenFilterLanguageSpanish, SnowballTokenFilterLanguageSwedish, SnowballTokenFilterLanguageTurkish}
}

// SplitSkillLanguage enumerates the values for split skill language.
type SplitSkillLanguage string

const (
	// SplitSkillLanguageAm Amharic
	SplitSkillLanguageAm SplitSkillLanguage = "am"
	// SplitSkillLanguageBs Bosnian
	SplitSkillLanguageBs SplitSkillLanguage = "bs"
	// SplitSkillLanguageCs Czech
	SplitSkillLanguageCs SplitSkillLanguage = "cs"
	// SplitSkillLanguageDa Danish
	SplitSkillLanguageDa SplitSkillLanguage = "da"
	// SplitSkillLanguageDe German
	SplitSkillLanguageDe SplitSkillLanguage = "de"
	// SplitSkillLanguageEn English
	SplitSkillLanguageEn SplitSkillLanguage = "en"
	// SplitSkillLanguageEs Spanish
	SplitSkillLanguageEs SplitSkillLanguage = "es"
	// SplitSkillLanguageEt Estonian
	SplitSkillLanguageEt SplitSkillLanguage = "et"
	// SplitSkillLanguageFi Finnish
	SplitSkillLanguageFi SplitSkillLanguage = "fi"
	// SplitSkillLanguageFr French
	SplitSkillLanguageFr SplitSkillLanguage = "fr"
	// SplitSkillLanguageHe Hebrew
	SplitSkillLanguageHe SplitSkillLanguage = "he"
	// SplitSkillLanguageHi Hindi
	SplitSkillLanguageHi SplitSkillLanguage = "hi"
	// SplitSkillLanguageHr Croatian
	SplitSkillLanguageHr SplitSkillLanguage = "hr"
	// SplitSkillLanguageHu Hungarian
	SplitSkillLanguageHu SplitSkillLanguage = "hu"
	// SplitSkillLanguageID Indonesian
	SplitSkillLanguageID SplitSkillLanguage = "id"
	// SplitSkillLanguageIs Icelandic
	SplitSkillLanguageIs SplitSkillLanguage = "is"
	// SplitSkillLanguageIt Italian
	SplitSkillLanguageIt SplitSkillLanguage = "it"
	// SplitSkillLanguageJa Japanese
	SplitSkillLanguageJa SplitSkillLanguage = "ja"
	// SplitSkillLanguageKo Korean
	SplitSkillLanguageKo SplitSkillLanguage = "ko"
	// SplitSkillLanguageLv Latvian
	SplitSkillLanguageLv SplitSkillLanguage = "lv"
	// SplitSkillLanguageNb Norwegian
	SplitSkillLanguageNb SplitSkillLanguage = "nb"
	// SplitSkillLanguageNl Dutch
	SplitSkillLanguageNl SplitSkillLanguage = "nl"
	// SplitSkillLanguagePl Polish
	SplitSkillLanguagePl SplitSkillLanguage = "pl"
	// SplitSkillLanguagePt Portuguese (Portugal)
	SplitSkillLanguagePt SplitSkillLanguage = "pt"
	// SplitSkillLanguagePtBr Portuguese (Brazil)
	SplitSkillLanguagePtBr SplitSkillLanguage = "pt-br"
	// SplitSkillLanguageRu Russian
	SplitSkillLanguageRu SplitSkillLanguage = "ru"
	// SplitSkillLanguageSk Slovak
	SplitSkillLanguageSk SplitSkillLanguage = "sk"
	// SplitSkillLanguageSl Slovenian
	SplitSkillLanguageSl SplitSkillLanguage = "sl"
	// SplitSkillLanguageSr Serbian
	SplitSkillLanguageSr SplitSkillLanguage = "sr"
	// SplitSkillLanguageSv Swedish
	SplitSkillLanguageSv SplitSkillLanguage = "sv"
	// SplitSkillLanguageTr Turkish
	SplitSkillLanguageTr SplitSkillLanguage = "tr"
	// SplitSkillLanguageUr Urdu
	SplitSkillLanguageUr SplitSkillLanguage = "ur"
	// SplitSkillLanguageZh Chinese (Simplified)
	SplitSkillLanguageZh SplitSkillLanguage = "zh"
)

// PossibleSplitSkillLanguageValues returns an array of possible values for the SplitSkillLanguage const type.
func PossibleSplitSkillLanguageValues() []SplitSkillLanguage {
	return []SplitSkillLanguage{SplitSkillLanguageAm, SplitSkillLanguageBs, SplitSkillLanguageCs, SplitSkillLanguageDa, SplitSkillLanguageDe, SplitSkillLanguageEn, SplitSkillLanguageEs, SplitSkillLanguageEt, SplitSkillLanguageFi, SplitSkillLanguageFr, SplitSkillLanguageHe, SplitSkillLanguageHi, SplitSkillLanguageHr, SplitSkillLanguageHu, SplitSkillLanguageID, SplitSkillLanguageIs, SplitSkillLanguageIt, SplitSkillLanguageJa, SplitSkillLanguageKo, SplitSkillLanguageLv, SplitSkillLanguageNb, SplitSkillLanguageNl, SplitSkillLanguagePl, SplitSkillLanguagePt, SplitSkillLanguagePtBr, SplitSkillLanguageRu, SplitSkillLanguageSk, SplitSkillLanguageSl, SplitSkillLanguageSr, SplitSkillLanguageSv, SplitSkillLanguageTr, SplitSkillLanguageUr, SplitSkillLanguageZh}
}

// StemmerTokenFilterLanguage enumerates the values for stemmer token filter language.
type StemmerTokenFilterLanguage string

const (
	// StemmerTokenFilterLanguageArabic Selects the Lucene stemming tokenizer for Arabic.
	StemmerTokenFilterLanguageArabic StemmerTokenFilterLanguage = "arabic"
	// StemmerTokenFilterLanguageArmenian Selects the Lucene stemming tokenizer for Armenian.
	StemmerTokenFilterLanguageArmenian StemmerTokenFilterLanguage = "armenian"
	// StemmerTokenFilterLanguageBasque Selects the Lucene stemming tokenizer for Basque.
	StemmerTokenFilterLanguageBasque StemmerTokenFilterLanguage = "basque"
	// StemmerTokenFilterLanguageBrazilian Selects the Lucene stemming tokenizer for Portuguese (Brazil).
	StemmerTokenFilterLanguageBrazilian StemmerTokenFilterLanguage = "brazilian"
	// StemmerTokenFilterLanguageBulgarian Selects the Lucene stemming tokenizer for Bulgarian.
	StemmerTokenFilterLanguageBulgarian StemmerTokenFilterLanguage = "bulgarian"
	// StemmerTokenFilterLanguageCatalan Selects the Lucene stemming tokenizer for Catalan.
	StemmerTokenFilterLanguageCatalan StemmerTokenFilterLanguage = "catalan"
	// StemmerTokenFilterLanguageCzech Selects the Lucene stemming tokenizer for Czech.
	StemmerTokenFilterLanguageCzech StemmerTokenFilterLanguage = "czech"
	// StemmerTokenFilterLanguageDanish Selects the Lucene stemming tokenizer for Danish.
	StemmerTokenFilterLanguageDanish StemmerTokenFilterLanguage = "danish"
	// StemmerTokenFilterLanguageDutch Selects the Lucene stemming tokenizer for Dutch.
	StemmerTokenFilterLanguageDutch StemmerTokenFilterLanguage = "dutch"
	// StemmerTokenFilterLanguageDutchKp Selects the Lucene stemming tokenizer for Dutch that uses the
	// Kraaij-Pohlmann stemming algorithm.
	StemmerTokenFilterLanguageDutchKp StemmerTokenFilterLanguage = "dutchKp"
	// StemmerTokenFilterLanguageEnglish Selects the Lucene stemming tokenizer for English.
	StemmerTokenFilterLanguageEnglish StemmerTokenFilterLanguage = "english"
	// StemmerTokenFilterLanguageFinnish Selects the Lucene stemming tokenizer for Finnish.
	StemmerTokenFilterLanguageFinnish StemmerTokenFilterLanguage = "finnish"
	// StemmerTokenFilterLanguageFrench Selects the Lucene stemming tokenizer for French.
	StemmerTokenFilterLanguageFrench StemmerTokenFilterLanguage = "french"
	// StemmerTokenFilterLanguageGalician Selects the Lucene stemming tokenizer for Galician.
	StemmerTokenFilterLanguageGalician StemmerTokenFilterLanguage = "galician"
	// StemmerTokenFilterLanguageGerman Selects the Lucene stemming tokenizer for German.
	StemmerTokenFilterLanguageGerman StemmerTokenFilterLanguage = "german"
	// StemmerTokenFilterLanguageGerman2 Selects the Lucene stemming tokenizer that uses the German variant
	// algorithm.
	StemmerTokenFilterLanguageGerman2 StemmerTokenFilterLanguage = "german2"
	// StemmerTokenFilterLanguageGreek Selects the Lucene stemming tokenizer for Greek.
	StemmerTokenFilterLanguageGreek StemmerTokenFilterLanguage = "greek"
	// StemmerTokenFilterLanguageHindi Selects the Lucene stemming tokenizer for Hindi.
	StemmerTokenFilterLanguageHindi StemmerTokenFilterLanguage = "hindi"
	// StemmerTokenFilterLanguageHungarian Selects the Lucene stemming tokenizer for Hungarian.
	StemmerTokenFilterLanguageHungarian StemmerTokenFilterLanguage = "hungarian"
	// StemmerTokenFilterLanguageIndonesian Selects the Lucene stemming tokenizer for Indonesian.
	StemmerTokenFilterLanguageIndonesian StemmerTokenFilterLanguage = "indonesian"
	// StemmerTokenFilterLanguageIrish Selects the Lucene stemming tokenizer for Irish.
	StemmerTokenFilterLanguageIrish StemmerTokenFilterLanguage = "irish"
	// StemmerTokenFilterLanguageItalian Selects the Lucene stemming tokenizer for Italian.
	StemmerTokenFilterLanguageItalian StemmerTokenFilterLanguage = "italian"
	// StemmerTokenFilterLanguageLatvian Selects the Lucene stemming tokenizer for Latvian.
	StemmerTokenFilterLanguageLatvian StemmerTokenFilterLanguage = "latvian"
	// StemmerTokenFilterLanguageLightEnglish Selects the Lucene stemming tokenizer for English that does light
	// stemming.
	StemmerTokenFilterLanguageLightEnglish StemmerTokenFilterLanguage = "lightEnglish"
	// StemmerTokenFilterLanguageLightFinnish Selects the Lucene stemming tokenizer for Finnish that does light
	// stemming.
	StemmerTokenFilterLanguageLightFinnish StemmerTokenFilterLanguage = "lightFinnish"
	// StemmerTokenFilterLanguageLightFrench Selects the Lucene stemming tokenizer for French that does light
	// stemming.
	StemmerTokenFilterLanguageLightFrench StemmerTokenFilterLanguage = "lightFrench"
	// StemmerTokenFilterLanguageLightGerman Selects the Lucene stemming tokenizer for German that does light
	// stemming.
	StemmerTokenFilterLanguageLightGerman StemmerTokenFilterLanguage = "lightGerman"
	// StemmerTokenFilterLanguageLightHungarian Selects the Lucene stemming tokenizer for Hungarian that does
	// light stemming.
	StemmerTokenFilterLanguageLightHungarian StemmerTokenFilterLanguage = "lightHungarian"
	// StemmerTokenFilterLanguageLightItalian Selects the Lucene stemming tokenizer for Italian that does light
	// stemming.
	StemmerTokenFilterLanguageLightItalian StemmerTokenFilterLanguage = "lightItalian"
	// StemmerTokenFilterLanguageLightNorwegian Selects the Lucene stemming tokenizer for Norwegian (Bokmål)
	// that does light stemming.
	StemmerTokenFilterLanguageLightNorwegian StemmerTokenFilterLanguage = "lightNorwegian"
	// StemmerTokenFilterLanguageLightNynorsk Selects the Lucene stemming tokenizer for Norwegian (Nynorsk)
	// that does light stemming.
	StemmerTokenFilterLanguageLightNynorsk StemmerTokenFilterLanguage = "lightNynorsk"
	// StemmerTokenFilterLanguageLightPortuguese Selects the Lucene stemming tokenizer for Portuguese that does
	// light stemming.
	StemmerTokenFilterLanguageLightPortuguese StemmerTokenFilterLanguage = "lightPortuguese"
	// StemmerTokenFilterLanguageLightRussian Selects the Lucene stemming tokenizer for Russian that does light
	// stemming.
	StemmerTokenFilterLanguageLightRussian StemmerTokenFilterLanguage = "lightRussian"
	// StemmerTokenFilterLanguageLightSpanish Selects the Lucene stemming tokenizer for Spanish that does light
	// stemming.
	StemmerTokenFilterLanguageLightSpanish StemmerTokenFilterLanguage = "lightSpanish"
	// StemmerTokenFilterLanguageLightSwedish Selects the Lucene stemming tokenizer for Swedish that does light
	// stemming.
	StemmerTokenFilterLanguageLightSwedish StemmerTokenFilterLanguage = "lightSwedish"
	// StemmerTokenFilterLanguageLovins Selects the Lucene stemming tokenizer for English that uses the Lovins
	// stemming algorithm.
	StemmerTokenFilterLanguageLovins StemmerTokenFilterLanguage = "lovins"
	// StemmerTokenFilterLanguageMinimalEnglish Selects the Lucene stemming tokenizer for English that does
	// minimal stemming.
	StemmerTokenFilterLanguageMinimalEnglish StemmerTokenFilterLanguage = "minimalEnglish"
	// StemmerTokenFilterLanguageMinimalFrench Selects the Lucene stemming tokenizer for French that does
	// minimal stemming.
	StemmerTokenFilterLanguageMinimalFrench StemmerTokenFilterLanguage = "minimalFrench"
	// StemmerTokenFilterLanguageMinimalGalician Selects the Lucene stemming tokenizer for Galician that does
	// minimal stemming.
	StemmerTokenFilterLanguageMinimalGalician StemmerTokenFilterLanguage = "minimalGalician"
	// StemmerTokenFilterLanguageMinimalGerman Selects the Lucene stemming tokenizer for German that does
	// minimal stemming.
	StemmerTokenFilterLanguageMinimalGerman StemmerTokenFilterLanguage = "minimalGerman"
	// StemmerTokenFilterLanguageMinimalNorwegian Selects the Lucene stemming tokenizer for Norwegian (Bokmål)
	// that does minimal stemming.
	StemmerTokenFilterLanguageMinimalNorwegian StemmerTokenFilterLanguage = "minimalNorwegian"
	// StemmerTokenFilterLanguageMinimalNynorsk Selects the Lucene stemming tokenizer for Norwegian (Nynorsk)
	// that does minimal stemming.
	StemmerTokenFilterLanguageMinimalNynorsk StemmerTokenFilterLanguage = "minimalNynorsk"
	// StemmerTokenFilterLanguageMinimalPortuguese Selects the Lucene stemming tokenizer for Portuguese that
	// does minimal stemming.
	StemmerTokenFilterLanguageMinimalPortuguese StemmerTokenFilterLanguage = "minimalPortuguese"
	// StemmerTokenFilterLanguageNorwegian Selects the Lucene stemming tokenizer for Norwegian (Bokmål).
	StemmerTokenFilterLanguageNorwegian StemmerTokenFilterLanguage = "norwegian"
	// StemmerTokenFilterLanguagePorter2 Selects the Lucene stemming tokenizer for English that uses the
	// Porter2 stemming algorithm.
	StemmerTokenFilterLanguagePorter2 StemmerTokenFilterLanguage = "porter2"
	// StemmerTokenFilterLanguagePortuguese Selects the Lucene stemming tokenizer for Portuguese.
	StemmerTokenFilterLanguagePortuguese StemmerTokenFilterLanguage = "portuguese"
	// StemmerTokenFilterLanguagePortugueseRslp Selects the Lucene stemming tokenizer for Portuguese that uses
	// the RSLP stemming algorithm.
	StemmerTokenFilterLanguagePortugueseRslp StemmerTokenFilterLanguage = "portugueseRslp"
	// StemmerTokenFilterLanguagePossessiveEnglish Selects the Lucene stemming tokenizer for English that
	// removes trailing possessives from words.
	StemmerTokenFilterLanguagePossessiveEnglish StemmerTokenFilterLanguage = "possessiveEnglish"
	// StemmerTokenFilterLanguageRomanian Selects the Lucene stemming tokenizer for Romanian.
	StemmerTokenFilterLanguageRomanian StemmerTokenFilterLanguage = "romanian"
	// StemmerTokenFilterLanguageRussian Selects the Lucene stemming tokenizer for Russian.
	StemmerTokenFilterLanguageRussian StemmerTokenFilterLanguage = "russian"
	// StemmerTokenFilterLanguageSorani Selects the Lucene stemming tokenizer for Sorani.
	StemmerTokenFilterLanguageSorani StemmerTokenFilterLanguage = "sorani"
	// StemmerTokenFilterLanguageSpanish Selects the Lucene stemming tokenizer for Spanish.
	StemmerTokenFilterLanguageSpanish StemmerTokenFilterLanguage = "spanish"
	// StemmerTokenFilterLanguageSwedish Selects the Lucene stemming tokenizer for Swedish.
	StemmerTokenFilterLanguageSwedish StemmerTokenFilterLanguage = "swedish"
	// StemmerTokenFilterLanguageTurkish Selects the Lucene stemming tokenizer for Turkish.
	StemmerTokenFilterLanguageTurkish StemmerTokenFilterLanguage = "turkish"
)

// PossibleStemmerTokenFilterLanguageValues returns an array of possible values for the StemmerTokenFilterLanguage const type.
func PossibleStemmerTokenFilterLanguageValues() []StemmerTokenFilterLanguage {
	return []StemmerTokenFilterLanguage{StemmerTokenFilterLanguageArabic, StemmerTokenFilterLanguageArmenian, StemmerTokenFilterLanguageBasque, StemmerTokenFilterLanguageBrazilian, StemmerTokenFilterLanguageBulgarian, StemmerTokenFilterLanguageCatalan, StemmerTokenFilterLanguageCzech, StemmerTokenFilterLanguageDanish, StemmerTokenFilterLanguageDutch, StemmerTokenFilterLanguageDutchKp, StemmerTokenFilterLanguageEnglish, StemmerTokenFilterLanguageFinnish, StemmerTokenFilterLanguageFrench, StemmerTokenFilterLanguageGalician, StemmerTokenFilterLanguageGerman, StemmerTokenFilterLanguageGerman2, StemmerTokenFilterLanguageGreek, StemmerTokenFilterLanguageHindi, StemmerTokenFilterLanguageHungarian, StemmerTokenFilterLanguageIndonesian, StemmerTokenFilterLanguageIrish, StemmerTokenFilterLanguageItalian, StemmerTokenFilterLanguageLatvian, StemmerTokenFilterLanguageLightEnglish, StemmerTokenFilterLanguageLightFinnish, StemmerTokenFilterLanguageLightFrench, StemmerTokenFilterLanguageLightGerman, StemmerTokenFilterLanguageLightHungarian, StemmerTokenFilterLanguageLightItalian, StemmerTokenFilterLanguageLightNorwegian, StemmerTokenFilterLanguageLightNynorsk, StemmerTokenFilterLanguageLightPortuguese, StemmerTokenFilterLanguageLightRussian, StemmerTokenFilterLanguageLightSpanish, StemmerTokenFilterLanguageLightSwedish, StemmerTokenFilterLanguageLovins, StemmerTokenFilterLanguageMinimalEnglish, StemmerTokenFilterLanguageMinimalFrench, StemmerTokenFilterLanguageMinimalGalician, StemmerTokenFilterLanguageMinimalGerman, StemmerTokenFilterLanguageMinimalNorwegian, StemmerTokenFilterLanguageMinimalNynorsk, StemmerTokenFilterLanguageMinimalPortuguese, StemmerTokenFilterLanguageNorwegian, StemmerTokenFilterLanguagePorter2, StemmerTokenFilterLanguagePortuguese, StemmerTokenFilterLanguagePortugueseRslp, StemmerTokenFilterLanguagePossessiveEnglish, StemmerTokenFilterLanguageRomanian, StemmerTokenFilterLanguageRussian, StemmerTokenFilterLanguageSorani, StemmerTokenFilterLanguageSpanish, StemmerTokenFilterLanguageSwedish, StemmerTokenFilterLanguageTurkish}
}

// StopwordsList enumerates the values for stopwords list.
type StopwordsList string

const (
	// StopwordsListArabic Selects the stopword list for Arabic.
	StopwordsListArabic StopwordsList = "arabic"
	// StopwordsListArmenian Selects the stopword list for Armenian.
	StopwordsListArmenian StopwordsList = "armenian"
	// StopwordsListBasque Selects the stopword list for Basque.
	StopwordsListBasque StopwordsList = "basque"
	// StopwordsListBrazilian Selects the stopword list for Portuguese (Brazil).
	StopwordsListBrazilian StopwordsList = "brazilian"
	// StopwordsListBulgarian Selects the stopword list for Bulgarian.
	StopwordsListBulgarian StopwordsList = "bulgarian"
	// StopwordsListCatalan Selects the stopword list for Catalan.
	StopwordsListCatalan StopwordsList = "catalan"
	// StopwordsListCzech Selects the stopword list for Czech.
	StopwordsListCzech StopwordsList = "czech"
	// StopwordsListDanish Selects the stopword list for Danish.
	StopwordsListDanish StopwordsList = "danish"
	// StopwordsListDutch Selects the stopword list for Dutch.
	StopwordsListDutch StopwordsList = "dutch"
	// StopwordsListEnglish Selects the stopword list for English.
	StopwordsListEnglish StopwordsList = "english"
	// StopwordsListFinnish Selects the stopword list for Finnish.
	StopwordsListFinnish StopwordsList = "finnish"
	// StopwordsListFrench Selects the stopword list for French.
	StopwordsListFrench StopwordsList = "french"
	// StopwordsListGalician Selects the stopword list for Galician.
	StopwordsListGalician StopwordsList = "galician"
	// StopwordsListGerman Selects the stopword list for German.
	StopwordsListGerman StopwordsList = "german"
	// StopwordsListGreek Selects the stopword list for Greek.
	StopwordsListGreek StopwordsList = "greek"
	// StopwordsListHindi Selects the stopword list for Hindi.
	StopwordsListHindi StopwordsList = "hindi"
	// StopwordsListHungarian Selects the stopword list for Hungarian.
	StopwordsListHungarian StopwordsList = "hungarian"
	// StopwordsListIndonesian Selects the stopword list for Indonesian.
	StopwordsListIndonesian StopwordsList = "indonesian"
	// StopwordsListIrish Selects the stopword list for Irish.
	StopwordsListIrish StopwordsList = "irish"
	// StopwordsListItalian Selects the stopword list for Italian.
	StopwordsListItalian StopwordsList = "italian"
	// StopwordsListLatvian Selects the stopword list for Latvian.
	StopwordsListLatvian StopwordsList = "latvian"
	// StopwordsListNorwegian Selects the stopword list for Norwegian.
	StopwordsListNorwegian StopwordsList = "norwegian"
	// StopwordsListPersian Selects the stopword list for Persian.
	StopwordsListPersian StopwordsList = "persian"
	// StopwordsListPortuguese Selects the stopword list for Portuguese.
	StopwordsListPortuguese StopwordsList = "portuguese"
	// StopwordsListRomanian Selects the stopword list for Romanian.
	StopwordsListRomanian StopwordsList = "romanian"
	// StopwordsListRussian Selects the stopword list for Russian.
	StopwordsListRussian StopwordsList = "russian"
	// StopwordsListSorani Selects the stopword list for Sorani.
	StopwordsListSorani StopwordsList = "sorani"
	// StopwordsListSpanish Selects the stopword list for Spanish.
	StopwordsListSpanish StopwordsList = "spanish"
	// StopwordsListSwedish Selects the stopword list for Swedish.
	StopwordsListSwedish StopwordsList = "swedish"
	// StopwordsListThai Selects the stopword list for Thai.
	StopwordsListThai StopwordsList = "thai"
	// StopwordsListTurkish Selects the stopword list for Turkish.
	StopwordsListTurkish StopwordsList = "turkish"
)

// PossibleStopwordsListValues returns an array of possible values for the StopwordsList const type.
func PossibleStopwordsListValues() []StopwordsList {
	return []StopwordsList{StopwordsListArabic, StopwordsListArmenian, StopwordsListBasque, StopwordsListBrazilian, StopwordsListBulgarian, StopwordsListCatalan, StopwordsListCzech, StopwordsListDanish, StopwordsListDutch, StopwordsListEnglish, StopwordsListFinnish, StopwordsListFrench, StopwordsListGalician, StopwordsListGerman, StopwordsListGreek, StopwordsListHindi, StopwordsListHungarian, StopwordsListIndonesian, StopwordsListIrish, StopwordsListItalian, StopwordsListLatvian, StopwordsListNorwegian, StopwordsListPersian, StopwordsListPortuguese, StopwordsListRomanian, StopwordsListRussian, StopwordsListSorani, StopwordsListSpanish, StopwordsListSwedish, StopwordsListThai, StopwordsListTurkish}
}

// TextSplitMode enumerates the values for text split mode.
type TextSplitMode string

const (
	// TextSplitModePages Split the text into individual pages.
	TextSplitModePages TextSplitMode = "pages"
	// TextSplitModeSentences Split the text into individual sentences.
	TextSplitModeSentences TextSplitMode = "sentences"
)

// PossibleTextSplitModeValues returns an array of possible values for the TextSplitMode const type.
func PossibleTextSplitModeValues() []TextSplitMode {
	return []TextSplitMode{TextSplitModePages, TextSplitModeSentences}
}

// TextTranslationSkillLanguage enumerates the values for text translation skill language.
type TextTranslationSkillLanguage string

const (
	// TextTranslationSkillLanguageAf Afrikaans
	TextTranslationSkillLanguageAf TextTranslationSkillLanguage = "af"
	// TextTranslationSkillLanguageAr Arabic
	TextTranslationSkillLanguageAr TextTranslationSkillLanguage = "ar"
	// TextTranslationSkillLanguageBg Bulgarian
	TextTranslationSkillLanguageBg TextTranslationSkillLanguage = "bg"
	// TextTranslationSkillLanguageBn Bangla
	TextTranslationSkillLanguageBn TextTranslationSkillLanguage = "bn"
	// TextTranslationSkillLanguageBs Bosnian (Latin)
	TextTranslationSkillLanguageBs TextTranslationSkillLanguage = "bs"
	// TextTranslationSkillLanguageCa Catalan
	TextTranslationSkillLanguageCa TextTranslationSkillLanguage = "ca"
	// TextTranslationSkillLanguageCs Czech
	TextTranslationSkillLanguageCs TextTranslationSkillLanguage = "cs"
	// TextTranslationSkillLanguageCy Welsh
	TextTranslationSkillLanguageCy TextTranslationSkillLanguage = "cy"
	// TextTranslationSkillLanguageDa Danish
	TextTranslationSkillLanguageDa TextTranslationSkillLanguage = "da"
	// TextTranslationSkillLanguageDe German
	TextTranslationSkillLanguageDe TextTranslationSkillLanguage = "de"
	// TextTranslationSkillLanguageEl Greek
	TextTranslationSkillLanguageEl TextTranslationSkillLanguage = "el"
	// TextTranslationSkillLanguageEn English
	TextTranslationSkillLanguageEn TextTranslationSkillLanguage = "en"
	// TextTranslationSkillLanguageEs Spanish
	TextTranslationSkillLanguageEs TextTranslationSkillLanguage = "es"
	// TextTranslationSkillLanguageEt Estonian
	TextTranslationSkillLanguageEt TextTranslationSkillLanguage = "et"
	// TextTranslationSkillLanguageFa Persian
	TextTranslationSkillLanguageFa TextTranslationSkillLanguage = "fa"
	// TextTranslationSkillLanguageFi Finnish
	TextTranslationSkillLanguageFi TextTranslationSkillLanguage = "fi"
	// TextTranslationSkillLanguageFil Filipino
	TextTranslationSkillLanguageFil TextTranslationSkillLanguage = "fil"
	// TextTranslationSkillLanguageFj Fijian
	TextTranslationSkillLanguageFj TextTranslationSkillLanguage = "fj"
	// TextTranslationSkillLanguageFr French
	TextTranslationSkillLanguageFr TextTranslationSkillLanguage = "fr"
	// TextTranslationSkillLanguageGa Irish
	TextTranslationSkillLanguageGa TextTranslationSkillLanguage = "ga"
	// TextTranslationSkillLanguageHe Hebrew
	TextTranslationSkillLanguageHe TextTranslationSkillLanguage = "he"
	// TextTranslationSkillLanguageHi Hindi
	TextTranslationSkillLanguageHi TextTranslationSkillLanguage = "hi"
	// TextTranslationSkillLanguageHr Croatian
	TextTranslationSkillLanguageHr TextTranslationSkillLanguage = "hr"
	// TextTranslationSkillLanguageHt Haitian Creole
	TextTranslationSkillLanguageHt TextTranslationSkillLanguage = "ht"
	// TextTranslationSkillLanguageHu Hungarian
	TextTranslationSkillLanguageHu TextTranslationSkillLanguage = "hu"
	// TextTranslationSkillLanguageID Indonesian
	TextTranslationSkillLanguageID TextTranslationSkillLanguage = "id"
	// TextTranslationSkillLanguageIs Icelandic
	TextTranslationSkillLanguageIs TextTranslationSkillLanguage = "is"
	// TextTranslationSkillLanguageIt Italian
	TextTranslationSkillLanguageIt TextTranslationSkillLanguage = "it"
	// TextTranslationSkillLanguageJa Japanese
	TextTranslationSkillLanguageJa TextTranslationSkillLanguage = "ja"
	// TextTranslationSkillLanguageKn Kannada
	TextTranslationSkillLanguageKn TextTranslationSkillLanguage = "kn"
	// TextTranslationSkillLanguageKo Korean
	TextTranslationSkillLanguageKo TextTranslationSkillLanguage = "ko"
	// TextTranslationSkillLanguageLt Lithuanian
	TextTranslationSkillLanguageLt TextTranslationSkillLanguage = "lt"
	// TextTranslationSkillLanguageLv Latvian
	TextTranslationSkillLanguageLv TextTranslationSkillLanguage = "lv"
	// TextTranslationSkillLanguageMg Malagasy
	TextTranslationSkillLanguageMg TextTranslationSkillLanguage = "mg"
	// TextTranslationSkillLanguageMi Maori
	TextTranslationSkillLanguageMi TextTranslationSkillLanguage = "mi"
	// TextTranslationSkillLanguageMl Malayalam
	TextTranslationSkillLanguageMl TextTranslationSkillLanguage = "ml"
	// TextTranslationSkillLanguageMs Malay
	TextTranslationSkillLanguageMs TextTranslationSkillLanguage = "ms"
	// TextTranslationSkillLanguageMt Maltese
	TextTranslationSkillLanguageMt TextTranslationSkillLanguage = "mt"
	// TextTranslationSkillLanguageMww Hmong Daw
	TextTranslationSkillLanguageMww TextTranslationSkillLanguage = "mww"
	// TextTranslationSkillLanguageNb Norwegian
	TextTranslationSkillLanguageNb TextTranslationSkillLanguage = "nb"
	// TextTranslationSkillLanguageNl Dutch
	TextTranslationSkillLanguageNl TextTranslationSkillLanguage = "nl"
	// TextTranslationSkillLanguageOtq Queretaro Otomi
	TextTranslationSkillLanguageOtq TextTranslationSkillLanguage = "otq"
	// TextTranslationSkillLanguagePa Punjabi
	TextTranslationSkillLanguagePa TextTranslationSkillLanguage = "pa"
	// TextTranslationSkillLanguagePl Polish
	TextTranslationSkillLanguagePl TextTranslationSkillLanguage = "pl"
	// TextTranslationSkillLanguagePt Portuguese
	TextTranslationSkillLanguagePt TextTranslationSkillLanguage = "pt"
	// TextTranslationSkillLanguagePtBr Portuguese (Brazil)
	TextTranslationSkillLanguagePtBr TextTranslationSkillLanguage = "pt-br"
	// TextTranslationSkillLanguagePtPT Portuguese (Portugal)
	TextTranslationSkillLanguagePtPT TextTranslationSkillLanguage = "pt-PT"
	// TextTranslationSkillLanguageRo Romanian
	TextTranslationSkillLanguageRo TextTranslationSkillLanguage = "ro"
	// TextTranslationSkillLanguageRu Russian
	TextTranslationSkillLanguageRu TextTranslationSkillLanguage = "ru"
	// TextTranslationSkillLanguageSk Slovak
	TextTranslationSkillLanguageSk TextTranslationSkillLanguage = "sk"
	// TextTranslationSkillLanguageSl Slovenian
	TextTranslationSkillLanguageSl TextTranslationSkillLanguage = "sl"
	// TextTranslationSkillLanguageSm Samoan
	TextTranslationSkillLanguageSm TextTranslationSkillLanguage = "sm"
	// TextTranslationSkillLanguageSrCyrl Serbian (Cyrillic)
	TextTranslationSkillLanguageSrCyrl TextTranslationSkillLanguage = "sr-Cyrl"
	// TextTranslationSkillLanguageSrLatn Serbian (Latin)
	TextTranslationSkillLanguageSrLatn TextTranslationSkillLanguage = "sr-Latn"
	// TextTranslationSkillLanguageSv Swedish
	TextTranslationSkillLanguageSv TextTranslationSkillLanguage = "sv"
	// TextTranslationSkillLanguageSw Kiswahili
	TextTranslationSkillLanguageSw TextTranslationSkillLanguage = "sw"
	// TextTranslationSkillLanguageTa Tamil
	TextTranslationSkillLanguageTa TextTranslationSkillLanguage = "ta"
	// TextTranslationSkillLanguageTe Telugu
	TextTranslationSkillLanguageTe TextTranslationSkillLanguage = "te"
	// TextTranslationSkillLanguageTh Thai
	TextTranslationSkillLanguageTh TextTranslationSkillLanguage = "th"
	// TextTranslationSkillLanguageTlh Klingon
	TextTranslationSkillLanguageTlh TextTranslationSkillLanguage = "tlh"
	// TextTranslationSkillLanguageTlhLatn Klingon (Latin script)
	TextTranslationSkillLanguageTlhLatn TextTranslationSkillLanguage = "tlh-Latn"
	// TextTranslationSkillLanguageTlhPiqd Klingon (Klingon script)
	TextTranslationSkillLanguageTlhPiqd TextTranslationSkillLanguage = "tlh-Piqd"
	// TextTranslationSkillLanguageTo Tongan
	TextTranslationSkillLanguageTo TextTranslationSkillLanguage = "to"
	// TextTranslationSkillLanguageTr Turkish
	TextTranslationSkillLanguageTr TextTranslationSkillLanguage = "tr"
	// TextTranslationSkillLanguageTy Tahitian
	TextTranslationSkillLanguageTy TextTranslationSkillLanguage = "ty"
	// TextTranslationSkillLanguageUk Ukrainian
	TextTranslationSkillLanguageUk TextTranslationSkillLanguage = "uk"
	// TextTranslationSkillLanguageUr Urdu
	TextTranslationSkillLanguageUr TextTranslationSkillLanguage = "ur"
	// TextTranslationSkillLanguageVi Vietnamese
	TextTranslationSkillLanguageVi TextTranslationSkillLanguage = "vi"
	// TextTranslationSkillLanguageYua Yucatec Maya
	TextTranslationSkillLanguageYua TextTranslationSkillLanguage = "yua"
	// TextTranslationSkillLanguageYue Cantonese (Traditional)
	TextTranslationSkillLanguageYue TextTranslationSkillLanguage = "yue"
	// TextTranslationSkillLanguageZhHans Chinese Simplified
	TextTranslationSkillLanguageZhHans TextTranslationSkillLanguage = "zh-Hans"
	// TextTranslationSkillLanguageZhHant Chinese Traditional
	TextTranslationSkillLanguageZhHant TextTranslationSkillLanguage = "zh-Hant"
)

// PossibleTextTranslationSkillLanguageValues returns an array of possible values for the TextTranslationSkillLanguage const type.
func PossibleTextTranslationSkillLanguageValues() []TextTranslationSkillLanguage {
	return []TextTranslationSkillLanguage{TextTranslationSkillLanguageAf, TextTranslationSkillLanguageAr, TextTranslationSkillLanguageBg, TextTranslationSkillLanguageBn, TextTranslationSkillLanguageBs, TextTranslationSkillLanguageCa, TextTranslationSkillLanguageCs, TextTranslationSkillLanguageCy, TextTranslationSkillLanguageDa, TextTranslationSkillLanguageDe, TextTranslationSkillLanguageEl, TextTranslationSkillLanguageEn, TextTranslationSkillLanguageEs, TextTranslationSkillLanguageEt, TextTranslationSkillLanguageFa, TextTranslationSkillLanguageFi, TextTranslationSkillLanguageFil, TextTranslationSkillLanguageFj, TextTranslationSkillLanguageFr, TextTranslationSkillLanguageGa, TextTranslationSkillLanguageHe, TextTranslationSkillLanguageHi, TextTranslationSkillLanguageHr, TextTranslationSkillLanguageHt, TextTranslationSkillLanguageHu, TextTranslationSkillLanguageID, TextTranslationSkillLanguageIs, TextTranslationSkillLanguageIt, TextTranslationSkillLanguageJa, TextTranslationSkillLanguageKn, TextTranslationSkillLanguageKo, TextTranslationSkillLanguageLt, TextTranslationSkillLanguageLv, TextTranslationSkillLanguageMg, TextTranslationSkillLanguageMi, TextTranslationSkillLanguageMl, TextTranslationSkillLanguageMs, TextTranslationSkillLanguageMt, TextTranslationSkillLanguageMww, TextTranslationSkillLanguageNb, TextTranslationSkillLanguageNl, TextTranslationSkillLanguageOtq, TextTranslationSkillLanguagePa, TextTranslationSkillLanguagePl, TextTranslationSkillLanguagePt, TextTranslationSkillLanguagePtBr, TextTranslationSkillLanguagePtPT, TextTranslationSkillLanguageRo, TextTranslationSkillLanguageRu, TextTranslationSkillLanguageSk, TextTranslationSkillLanguageSl, TextTranslationSkillLanguageSm, TextTranslationSkillLanguageSrCyrl, TextTranslationSkillLanguageSrLatn, TextTranslationSkillLanguageSv, TextTranslationSkillLanguageSw, TextTranslationSkillLanguageTa, TextTranslationSkillLanguageTe, TextTranslationSkillLanguageTh, TextTranslationSkillLanguageTlh, TextTranslationSkillLanguageTlhLatn, TextTranslationSkillLanguageTlhPiqd, TextTranslationSkillLanguageTo, TextTranslationSkillLanguageTr, TextTranslationSkillLanguageTy, TextTranslationSkillLanguageUk, TextTranslationSkillLanguageUr, TextTranslationSkillLanguageVi, TextTranslationSkillLanguageYua, TextTranslationSkillLanguageYue, TextTranslationSkillLanguageZhHans, TextTranslationSkillLanguageZhHant}
}

// TokenCharacterKind enumerates the values for token character kind.
type TokenCharacterKind string

const (
	// TokenCharacterKindDigit Keeps digits in tokens.
	TokenCharacterKindDigit TokenCharacterKind = "digit"
	// TokenCharacterKindLetter Keeps letters in tokens.
	TokenCharacterKindLetter TokenCharacterKind = "letter"
	// TokenCharacterKindPunctuation Keeps punctuation in tokens.
	TokenCharacterKindPunctuation TokenCharacterKind = "punctuation"
	// TokenCharacterKindSymbol Keeps symbols in tokens.
	TokenCharacterKindSymbol TokenCharacterKind = "symbol"
	// TokenCharacterKindWhitespace Keeps whitespace in tokens.
	TokenCharacterKindWhitespace TokenCharacterKind = "whitespace"
)

// PossibleTokenCharacterKindValues returns an array of possible values for the TokenCharacterKind const type.
func PossibleTokenCharacterKindValues() []TokenCharacterKind {
	return []TokenCharacterKind{TokenCharacterKindDigit, TokenCharacterKindLetter, TokenCharacterKindPunctuation, TokenCharacterKindSymbol, TokenCharacterKindWhitespace}
}

// TokenFilterName enumerates the values for token filter name.
type TokenFilterName string

const (
	// TokenFilterNameASCIIFolding Converts alphabetic, numeric, and symbolic Unicode characters which are not
	// in the first 127 ASCII characters (the "Basic Latin" Unicode block) into their ASCII equivalents, if
	// such equivalents exist. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.html
	TokenFilterNameASCIIFolding TokenFilterName = "asciifolding"
	// TokenFilterNameApostrophe Strips all characters after an apostrophe (including the apostrophe itself).
	// See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/tr/ApostropheFilter.html
	TokenFilterNameApostrophe TokenFilterName = "apostrophe"
	// TokenFilterNameArabicNormalization A token filter that applies the Arabic normalizer to normalize the
	// orthography. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.html
	TokenFilterNameArabicNormalization TokenFilterName = "arabic_normalization"
	// TokenFilterNameCjkBigram Forms bigrams of CJK terms that are generated from the standard tokenizer. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/cjk/CJKBigramFilter.html
	TokenFilterNameCjkBigram TokenFilterName = "cjk_bigram"
	// TokenFilterNameCjkWidth Normalizes CJK width differences. Folds fullwidth ASCII variants into the
	// equivalent basic Latin, and half-width Katakana variants into the equivalent Kana. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/cjk/CJKWidthFilter.html
	TokenFilterNameCjkWidth TokenFilterName = "cjk_width"
	// TokenFilterNameClassic Removes English possessives, and dots from acronyms. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/ClassicFilter.html
	TokenFilterNameClassic TokenFilterName = "classic"
	// TokenFilterNameCommonGram Construct bigrams for frequently occurring terms while indexing. Single terms
	// are still indexed too, with bigrams overlaid. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/commongrams/CommonGramsFilter.html
	TokenFilterNameCommonGram TokenFilterName = "common_grams"
	// TokenFilterNameEdgeNGram Generates n-grams of the given size(s) starting from the front or the back of
	// an input token. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.html
	TokenFilterNameEdgeNGram TokenFilterName = "edgeNGram_v2"
	// TokenFilterNameElision Removes elisions. For example, "l'avion" (the plane) will be converted to "avion"
	// (plane). See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/util/ElisionFilter.html
	TokenFilterNameElision TokenFilterName = "elision"
	// TokenFilterNameGermanNormalization Normalizes German characters according to the heuristics of the
	// German2 snowball algorithm. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/de/GermanNormalizationFilter.html
	TokenFilterNameGermanNormalization TokenFilterName = "german_normalization"
	// TokenFilterNameHindiNormalization Normalizes text in Hindi to remove some differences in spelling
	// variations. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/hi/HindiNormalizationFilter.html
	TokenFilterNameHindiNormalization TokenFilterName = "hindi_normalization"
	// TokenFilterNameIndicNormalization Normalizes the Unicode representation of text in Indian languages. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/in/IndicNormalizationFilter.html
	TokenFilterNameIndicNormalization TokenFilterName = "indic_normalization"
	// TokenFilterNameKStem A high-performance kstem filter for English. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/en/KStemFilter.html
	TokenFilterNameKStem TokenFilterName = "kstem"
	// TokenFilterNameKeywordRepeat Emits each incoming token twice, once as keyword and once as non-keyword.
	// See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilter.html
	TokenFilterNameKeywordRepeat TokenFilterName = "keyword_repeat"
	// TokenFilterNameLength Removes words that are too long or too short. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/LengthFilter.html
	TokenFilterNameLength TokenFilterName = "length"
	// TokenFilterNameLimit Limits the number of tokens while indexing. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter.html
	TokenFilterNameLimit TokenFilterName = "limit"
	// TokenFilterNameLowercase Normalizes token text to lower case. See
	// https://lucene.apache.org/core/6_6_1/analyzers-common/org/apache/lucene/analysis/core/LowerCaseFilter.html
	TokenFilterNameLowercase TokenFilterName = "lowercase"
	// TokenFilterNameNGram Generates n-grams of the given size(s). See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/NGramTokenFilter.html
	TokenFilterNameNGram TokenFilterName = "nGram_v2"
	// TokenFilterNamePersianNormalization Applies normalization for Persian. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/fa/PersianNormalizationFilter.html
	TokenFilterNamePersianNormalization TokenFilterName = "persian_normalization"
	// TokenFilterNamePhonetic Create tokens for phonetic matches. See
	// https://lucene.apache.org/core/4_10_3/analyzers-phonetic/org/apache/lucene/analysis/phonetic/package-tree.html
	TokenFilterNamePhonetic TokenFilterName = "phonetic"
	// TokenFilterNamePorterStem Uses the Porter stemming algorithm to transform the token stream. See
	// http://tartarus.org/~martin/PorterStemmer
	TokenFilterNamePorterStem TokenFilterName = "porter_stem"
	// TokenFilterNameReverse Reverses the token string. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/reverse/ReverseStringFilter.html
	TokenFilterNameReverse TokenFilterName = "reverse"
	// TokenFilterNameScandinavianFoldingNormalization Folds Scandinavian characters åÅäæÄÆ-&gt;a and
	// öÖøØ-&gt;o. It also discriminates against use of double vowels aa, ae, ao, oe and oo, leaving just the
	// first one. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter.html
	TokenFilterNameScandinavianFoldingNormalization TokenFilterName = "scandinavian_folding"
	// TokenFilterNameScandinavianNormalization Normalizes use of the interchangeable Scandinavian characters.
	// See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter.html
	TokenFilterNameScandinavianNormalization TokenFilterName = "scandinavian_normalization"
	// TokenFilterNameShingle Creates combinations of tokens as a single token. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/shingle/ShingleFilter.html
	TokenFilterNameShingle TokenFilterName = "shingle"
	// TokenFilterNameSnowball A filter that stems words using a Snowball-generated stemmer. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/snowball/SnowballFilter.html
	TokenFilterNameSnowball TokenFilterName = "snowball"
	// TokenFilterNameSoraniNormalization Normalizes the Unicode representation of Sorani text. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ckb/SoraniNormalizationFilter.html
	TokenFilterNameSoraniNormalization TokenFilterName = "sorani_normalization"
	// TokenFilterNameStemmer Language specific stemming filter. See
	// https://docs.microsoft.com/rest/api/searchservice/Custom-analyzers-in-Azure-Search#TokenFilters
	TokenFilterNameStemmer TokenFilterName = "stemmer"
	// TokenFilterNameStopwords Removes stop words from a token stream. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/StopFilter.html
	TokenFilterNameStopwords TokenFilterName = "stopwords"
	// TokenFilterNameTrim Trims leading and trailing whitespace from tokens. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/TrimFilter.html
	TokenFilterNameTrim TokenFilterName = "trim"
	// TokenFilterNameTruncate Truncates the terms to a specific length. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/TruncateTokenFilter.html
	TokenFilterNameTruncate TokenFilterName = "truncate"
	// TokenFilterNameUnique Filters out tokens with same text as the previous token. See
	// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter.html
	TokenFilterNameUnique TokenFilterName = "unique"
	// TokenFilterNameUppercase Normalizes token text to upper case. See
	// https://lucene.apache.org/core/6_6_1/analyzers-common/org/apache/lucene/analysis/core/UpperCaseFilter.html
	TokenFilterNameUppercase TokenFilterName = "uppercase"
	// TokenFilterNameWordDelimiter Splits words into subwords and performs optional transformations on subword
	// groups.
	TokenFilterNameWordDelimiter TokenFilterName = "word_delimiter"
)

// PossibleTokenFilterNameValues returns an array of possible values for the TokenFilterName const type.
func PossibleTokenFilterNameValues() []TokenFilterName {
	return []TokenFilterName{TokenFilterNameASCIIFolding, TokenFilterNameApostrophe, TokenFilterNameArabicNormalization, TokenFilterNameCjkBigram, TokenFilterNameCjkWidth, TokenFilterNameClassic, TokenFilterNameCommonGram, TokenFilterNameEdgeNGram, TokenFilterNameElision, TokenFilterNameGermanNormalization, TokenFilterNameHindiNormalization, TokenFilterNameIndicNormalization, TokenFilterNameKStem, TokenFilterNameKeywordRepeat, TokenFilterNameLength, TokenFilterNameLimit, TokenFilterNameLowercase, TokenFilterNameNGram, TokenFilterNamePersianNormalization, TokenFilterNamePhonetic, TokenFilterNamePorterStem, TokenFilterNameReverse, TokenFilterNameScandinavianFoldingNormalization, TokenFilterNameScandinavianNormalization, TokenFilterNameShingle, TokenFilterNameSnowball, TokenFilterNameSoraniNormalization, TokenFilterNameStemmer, TokenFilterNameStopwords, TokenFilterNameTrim, TokenFilterNameTruncate, TokenFilterNameUnique, TokenFilterNameUppercase, TokenFilterNameWordDelimiter}
}

// Type enumerates the values for type.
type Type string

const (
	// TypeDistance ...
	TypeDistance Type = "distance"
	// TypeFreshness ...
	TypeFreshness Type = "freshness"
	// TypeMagnitude ...
	TypeMagnitude Type = "magnitude"
	// TypeScoringFunction ...
	TypeScoringFunction Type = "ScoringFunction"
	// TypeTag ...
	TypeTag Type = "tag"
)

// PossibleTypeValues returns an array of possible values for the Type const type.
func PossibleTypeValues() []Type {
	return []Type{TypeDistance, TypeFreshness, TypeMagnitude, TypeScoringFunction, TypeTag}
}

// VectorSearchAlgorithmKind enumerates the values for vector search algorithm kind.
type VectorSearchAlgorithmKind string

const (
	// VectorSearchAlgorithmKindExhaustiveKnn Exhaustive KNN algorithm which will perform brute-force search.
	VectorSearchAlgorithmKindExhaustiveKnn VectorSearchAlgorithmKind = "exhaustiveKnn"
	// VectorSearchAlgorithmKindHnsw HNSW (Hierarchical Navigable Small World), a type of approximate nearest
	// neighbors algorithm.
	VectorSearchAlgorithmKindHnsw VectorSearchAlgorithmKind = "hnsw"
)

// PossibleVectorSearchAlgorithmKindValues returns an array of possible values for the VectorSearchAlgorithmKind const type.
func PossibleVectorSearchAlgorithmKindValues() []VectorSearchAlgorithmKind {
	return []VectorSearchAlgorithmKind{VectorSearchAlgorithmKindExhaustiveKnn, VectorSearchAlgorithmKindHnsw}
}

// VectorSearchAlgorithmMetric enumerates the values for vector search algorithm metric.
type VectorSearchAlgorithmMetric string

const (
	// VectorSearchAlgorithmMetricCosine ...
	VectorSearchAlgorithmMetricCosine VectorSearchAlgorithmMetric = "cosine"
	// VectorSearchAlgorithmMetricDotProduct ...
	VectorSearchAlgorithmMetricDotProduct VectorSearchAlgorithmMetric = "dotProduct"
	// VectorSearchAlgorithmMetricEuclidean ...
	VectorSearchAlgorithmMetricEuclidean VectorSearchAlgorithmMetric = "euclidean"
)

// PossibleVectorSearchAlgorithmMetricValues returns an array of possible values for the VectorSearchAlgorithmMetric const type.
func PossibleVectorSearchAlgorithmMetricValues() []VectorSearchAlgorithmMetric {
	return []VectorSearchAlgorithmMetric{VectorSearchAlgorithmMetricCosine, VectorSearchAlgorithmMetricDotProduct, VectorSearchAlgorithmMetricEuclidean}
}

// VectorSearchCompressionKind enumerates the values for vector search compression kind.
type VectorSearchCompressionKind string

const (
	// VectorSearchCompressionKindScalarQuantization Scalar Quantization, a type of compression method. In
	// scalar quantization, the original vectors values are compressed to a narrower type by discretizing and
	// representing each component of a vector using a reduced set of quantized values, thereby reducing the
	// overall data size.
	VectorSearchCompressionKindScalarQuantization VectorSearchCompressionKind = "scalarQuantization"
)

// PossibleVectorSearchCompressionKindValues returns an array of possible values for the VectorSearchCompressionKind const type.
func PossibleVectorSearchCompressionKindValues() []VectorSearchCompressionKind {
	return []VectorSearchCompressionKind{VectorSearchCompressionKindScalarQuantization}
}

// VectorSearchCompressionTargetDataType enumerates the values for vector search compression target data type.
type VectorSearchCompressionTargetDataType string

const (
	// VectorSearchCompressionTargetDataTypeInt8 ...
	VectorSearchCompressionTargetDataTypeInt8 VectorSearchCompressionTargetDataType = "int8"
)

// PossibleVectorSearchCompressionTargetDataTypeValues returns an array of possible values for the VectorSearchCompressionTargetDataType const type.
func PossibleVectorSearchCompressionTargetDataTypeValues() []VectorSearchCompressionTargetDataType {
	return []VectorSearchCompressionTargetDataType{VectorSearchCompressionTargetDataTypeInt8}
}

// VectorSearchVectorizerKind enumerates the values for vector search vectorizer kind.
type VectorSearchVectorizerKind string

const (
	// VectorSearchVectorizerKindAzureOpenAI Generate embeddings using an Azure OpenAI resource at query time.
	VectorSearchVectorizerKindAzureOpenAI VectorSearchVectorizerKind = "azureOpenAI"
	// VectorSearchVectorizerKindCustomWebAPI Generate embeddings using a custom web endpoint at query time.
	VectorSearchVectorizerKindCustomWebAPI VectorSearchVectorizerKind = "customWebApi"
)

// PossibleVectorSearchVectorizerKindValues returns an array of possible values for the VectorSearchVectorizerKind const type.
func PossibleVectorSearchVectorizerKindValues() []VectorSearchVectorizerKind {
	return []VectorSearchVectorizerKind{VectorSearchVectorizerKindAzureOpenAI, VectorSearchVectorizerKindCustomWebAPI}
}

// VisualFeature enumerates the values for visual feature.
type VisualFeature string

const (
	// VisualFeatureAdult Visual features recognized as adult persons.
	VisualFeatureAdult VisualFeature = "adult"
	// VisualFeatureBrands Visual features recognized as commercial brands.
	VisualFeatureBrands VisualFeature = "brands"
	// VisualFeatureCategories Categories.
	VisualFeatureCategories VisualFeature = "categories"
	// VisualFeatureDescription Description.
	VisualFeatureDescription VisualFeature = "description"
	// VisualFeatureFaces Visual features recognized as people faces.
	VisualFeatureFaces VisualFeature = "faces"
	// VisualFeatureObjects Visual features recognized as objects.
	VisualFeatureObjects VisualFeature = "objects"
	// VisualFeatureTags Tags.
	VisualFeatureTags VisualFeature = "tags"
)

// PossibleVisualFeatureValues returns an array of possible values for the VisualFeature const type.
func PossibleVisualFeatureValues() []VisualFeature {
	return []VisualFeature{VisualFeatureAdult, VisualFeatureBrands, VisualFeatureCategories, VisualFeatureDescription, VisualFeatureFaces, VisualFeatureObjects, VisualFeatureTags}
}
